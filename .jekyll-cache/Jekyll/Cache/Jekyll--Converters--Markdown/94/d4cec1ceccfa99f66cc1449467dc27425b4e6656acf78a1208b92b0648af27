I"t7<p>Java 中涉及控制执行流程的关键字有 if-else、while-do-while、for、switch、return、break、continue 等等；我们来挑几个来说道说道。</p>

<!--more-->

<h3 id="1要么生要么死">1、要么生，要么死</h3>

<p>在网络上看到这么一句话：“<strong>人生不过三条路，要么生，要么死，要么生不如死</strong>”，经典啊！这句话套用在 <code class="highlighter-rouge">if-else</code> 语句上也非常的贴切，不信你看：</p>

<p>只有一个 if 语句</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">布尔表达式</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">// 语句</span>
<span class="o">}</span>
</code></pre></div></div>

<p>或者一个if语句加上一个else语句</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">布尔表达式</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">// 语句</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="c1">// 语句</span>
<span class="o">}</span>
</code></pre></div></div>
<p>或者一个if语句加上一个 <code class="highlighter-rouge">else if</code> 语句，再加一个 else 语句</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">布尔表达式</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">// 语句</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">布尔表达式</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">// 语句</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="c1">// 语句</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="2想清楚再走还是先走一步再说">2、想清楚再走，还是先走一步再说</h3>

<p>while 和 <code class="highlighter-rouge">do-while</code> 语句常用来控制不确定次数的循环语句，除了形式上稍显不同之外，<code class="highlighter-rouge">do-while</code> 会比 while 多执行一次（同等条件下哦）；其格式如下：</p>

<p>while</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span><span class="o">(</span><span class="n">布尔表达式</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">// 语句</span>
<span class="o">}</span>
</code></pre></div></div>

<p>do-while</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">do</span> <span class="o">{</span>
<span class="c1">// 语句</span>
<span class="o">}</span> <span class="k">while</span><span class="o">(</span><span class="n">布尔表达式</span><span class="o">)</span>
</code></pre></div></div>
<h3 id="3次数确定请用-for">3、次数确定请用 for</h3>

<p>for 循环有两种形式，分别如下：</p>

<p>①、创建int变量的形式（可以主动指定循环次数，比如说可以把 <code class="highlighter-rouge">i &lt; strs.length()</code> 改为 <code class="highlighter-rouge">i &lt; 3</code> ，这样就只循环 3 次而不是 4 次）</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="o">[]</span> <span class="n">strs</span> <span class="o">=</span> <span class="o">{</span><span class="s">"沉"</span><span class="o">,</span> <span class="s">"默"</span><span class="o">,</span> <span class="s">"王"</span><span class="o">,</span> <span class="s">"二"</span><span class="o">};</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">strs</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
<span class="o">}</span>
</code></pre></div></div>
<p>稍微解释一下：第一次循环之前要进行变量初始化 <code class="highlighter-rouge">int i = 0</code>，随后进行条件测试 <code class="highlighter-rouge">i &lt; strs.length()</code>，然后执行语句 <code class="highlighter-rouge">String str = strs[i];</code>，语句结束后进行“步进” <code class="highlighter-rouge">i++</code>。</p>

<p>②、俗称“foreach”的形式（不必指定下标就能取出元素）</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="o">[]</span> <span class="n">strs</span> <span class="o">=</span> <span class="o">{</span><span class="s">"沉"</span><span class="o">,</span> <span class="s">"默"</span><span class="o">,</span> <span class="s">"王"</span><span class="o">,</span> <span class="s">"二"</span><span class="o">};</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">str</span> <span class="o">:</span> <span class="n">strs</span><span class="o">)</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>
<p>也稍微解释一下：冒号 <code class="highlighter-rouge">:</code> 之前声明了 String 类型的变量 str；冒号 <code class="highlighter-rouge">:</code> 之后是数组 strs；在执行循环的时候，Java 内部会依次取出数组 strs 中的每一个元素，然后赋值给变量 str，直到最后一个元素。</p>

<h3 id="4可以-switch-字符串了">4、可以 switch 字符串了</h3>

<p>当 if-else 的条件超出三个以上时（看起来有点臃肿），可使用 switch 语句来进行替代。switch 语句的形式如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span><span class="o">(</span><span class="n">condition</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">case</span> <span class="n">calue1</span> <span class="o">:</span>
        <span class="c1">// 语句</span>
        <span class="k">break</span><span class="o">;</span>
    <span class="k">case</span> <span class="n">calue2</span> <span class="o">:</span>
        <span class="c1">// 语句</span>
        <span class="k">break</span><span class="o">;</span>
    <span class="k">case</span> <span class="n">calue3</span> <span class="o">:</span>
        <span class="c1">// 语句</span>
        <span class="k">break</span><span class="o">;</span>
    <span class="k">default</span> <span class="o">:</span>
        <span class="c1">// 语句</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用 switch 语句时需要特别注意的就是 break 关键字，该用的地方一定不要忘记！ 否则，switch 语句就会触发下一个 case 分支，而忽略掉没有 break 关键字的当前分支。</p>

<p>从 Java SE 7 开始，switch 语句支持字符串形式的条件了；在这之前，switch 只支持类型为 char、byte、short 或 int 的常量表达式，以及枚举常量。</p>

<h3 id="5斐波那契数列">5、斐波那契数列</h3>

<p>斐波那契数列几乎是每一个学习编程的人都绕不开的一道笔试题；斐波那契数列是“斐波那契”（伟大的数学家）在养兔子时候发现的非常有意思的数列：</p>

<ul>
  <li>第一个月小兔子没有繁殖能力，所以还是一对；</li>
  <li>两个月后，生下一对小兔总数共有两对；</li>
  <li>三个月以后，老兔子又生下一对，因为小兔子还没有繁殖能力，所以一共是三对；</li>
</ul>

<p>……依次类推可以列出下表：</p>

<p><img src="https://upload-images.jianshu.io/upload_images/1179389-a7b408cfd85cd5ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>

<p>人们发现自然规律的能力好强，有没有？怎么使用 Java 实现斐波那契数列呢？</p>

<p>规律：第一个数+第二个数=第三个数，第二个数+第三个数=第四个数，第三个数+第四个数=第五个数，以此类推</p>

<p>流程控制语句有没有掌握，把这道斐波那契数列的面试题做出来就能测试出来了。具体代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Fibonacci</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">next</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="s">"、"</span> <span class="o">+</span> <span class="n">next</span> <span class="o">+</span> <span class="s">"、"</span><span class="o">);</span>
        <span class="c1">// 从3开始到第num个斐波那契数</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">12</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">last</span> <span class="o">=</span> <span class="n">start</span> <span class="o">+</span> <span class="n">next</span><span class="o">;</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">last</span> <span class="o">+</span> <span class="s">"、"</span><span class="o">);</span>
            <span class="n">start</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
            <span class="n">next</span> <span class="o">=</span> <span class="n">last</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="c1">// 通过迭代计算，效率很低</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">12</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">getFibonacci</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="s">"、"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getFibonacci</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nf">getFibonacci</span><span class="o">(</span><span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">getFibonacci</span><span class="o">(</span><span class="n">index</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>思路1：先指定前两个数，然后在 for 循环中计算接下来的数，然后用后一个数替换前一个。</p>

<p>思路2：通过迭代完成，下标是 1 或者 2 的时候返回 1，其余的数等于前一个数和前前一个数的和。</p>

<hr />

<p>上一篇：<a href="http://www.itwanger.com/java/2019/11/06/java-caozuofu-++.html">害死人的自动递增，不偿命的自动递减</a></p>

<p>下一篇：<a href="http://www.itwanger.com/java/2019/11/06/java-chushihua.html">Java是通过什么机制来确保对象初始化呢？</a></p>

<p>微信搜索「<strong>沉默王二</strong>」公众号，关注后回复「<strong>免费视频</strong>」获取 500G Java 高质量教学视频（已分门别类）。</p>
:ET