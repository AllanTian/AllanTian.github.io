I":U<p>《Java编程思想》中有这么一句话：“有时恰恰因为它，你才能够‘优雅而干净’地解决问题”——这句话说的是谁呢？就是本篇的主角——枚举（Enum）——大家鼓掌了。</p>

<!--more-->

<p>在之前很长时间一段时间里，我都不怎么用枚举，因为总感觉它没什么用处——这其实就是“自我认知”的短见。<strong>当一个人一直蹲在自己的深井里而不敢跳出来的话，那他真的只能看到井口那么大点的天空</strong>。</p>

<p>随着时间的推移，我做的项目越来越多，和枚举见面的机会也越来越多，于是我就渐渐地对它越来越有兴趣，研究得多了，才发现原来枚举如此的优秀。</p>

<h3 id="1枚举的常规用法">1）枚举的常规用法</h3>

<p>一个精简的枚举非常的干净优雅，见下例。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="nc">Chenmo</span> <span class="o">{</span>
	<span class="no">WANGER</span><span class="o">,</span> <span class="no">WANGSAN</span><span class="o">,</span> <span class="no">WANGSI</span>
<span class="o">}</span>
</code></pre></div></div>

<p>我们为沉默枚举创建了三个值，分别是王二、王三、王四。这段代码实际上调用了3次<code class="highlighter-rouge">Enum(String name, int ordinal)</code>（ordinal单词的意思为顺序），也就是：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nc">Enum</span><span class="o">&lt;</span><span class="nc">Chenmo</span><span class="o">&gt;(</span><span class="s">"WANGER"</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
<span class="k">new</span> <span class="nc">Enum</span><span class="o">&lt;</span><span class="nc">Chenmo</span><span class="o">&gt;(</span><span class="s">"WANGSAN"</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="k">new</span> <span class="nc">Enum</span><span class="o">&lt;</span><span class="nc">Chenmo</span><span class="o">&gt;(</span><span class="s">"WANGSI"</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</code></pre></div></div>

<p>我们来遍历输出一下枚举：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">(</span><span class="nc">Chenmo</span> <span class="n">e</span> <span class="o">:</span> <span class="nc">Chenmo</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
<span class="o">}</span>
<span class="c1">//输出</span>
<span class="c1">//WANGER</span>
<span class="c1">//WANGSAN</span>
<span class="c1">//WANGSI</span>
</code></pre></div></div>

<h3 id="2作为switch的判断条件">2）作为switch的判断条件</h3>

<p>使用枚举作为switch语句判断条件能让我们的代码可读性更强，示例如下。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Chenmo</span> <span class="n">key</span> <span class="o">=</span> <span class="nc">Chenmo</span><span class="o">.</span><span class="na">WANGER</span><span class="o">;</span>
<span class="k">switch</span> <span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">{</span>
<span class="k">case</span> <span class="nl">WANGSI:</span>
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"今天我送出一个CSDN大鼠标垫"</span><span class="o">);</span>
	<span class="k">break</span><span class="o">;</span>
<span class="k">case</span> <span class="nl">WANGSAN:</span>
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"今天我被坑一个CSDN学院年卡"</span><span class="o">);</span>
	<span class="k">break</span><span class="o">;</span>
<span class="k">default</span><span class="o">:</span>
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"今天我一边高兴，一边失落"</span><span class="o">);</span>
	<span class="k">break</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在通过case关键字判断的时候，可以直接使用枚举值，非常简洁。另外，在编译期间限定类型，可以有效的避免越界的情况——字符串常量类型在作为switch判断条件的时候很容易因为误写而发生越界问题。</p>

<h3 id="3枚举实现单例">3）枚举实现单例</h3>

<p>《Effective Java》一书中对使用枚举实现单例的方式推崇备至：</p>

<blockquote>
  <p>使用枚举实现单例的方法虽然还没有广泛采用，但是单元素的枚举类型已经成为实现Singleton的最佳方法。</p>
</blockquote>

<p>我觉得“虽然还没有广泛采用”几个字可以去掉了，时至今日，大家应该都知道：使用枚举实现单例是一种非常好的方式。</p>

<p>先来看“双重校验锁”实现的单例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SingleTon2</span> <span class="o">{</span>

	 <span class="c1">// 私有化构造方法</span>
	<span class="kd">private</span> <span class="nf">SingleTon2</span><span class="o">()</span> <span class="o">{</span>
	<span class="o">};</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="nc">SingleTon2</span> <span class="n">singleTon</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="nc">SingleTon2</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>

		<span class="c1">// 第一次校验</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">singleTon</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
			<span class="kd">synchronized</span> <span class="o">(</span><span class="nc">SingleTon2</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
				<span class="c1">// 第二次校验</span>
				<span class="k">if</span> <span class="o">(</span><span class="n">singleTon</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
					<span class="n">singleTon</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SingleTon2</span><span class="o">();</span>
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">singleTon</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>再来看枚举实现的单例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="nc">SingleTon</span> <span class="o">{</span>

	 <span class="no">INSTANCE</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"我很快乐！"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>不比不知道，一比吓一跳啊！枚举方式的单例简单到爆——为了不至于看起来太过精简，我还加了一个输出“我很快乐”的方法。</p>

<p>枚举实现的单例可轻松地解决两个问题：</p>

<p>①、线程安全问题。因为Java虚拟机在加载枚举类的时候，会使用ClassLoader的loadClass方法，这个方法使用了同步代码块来保证线程安全。</p>

<p>②、避免反序列化破坏单例。因为枚举的反序列化并不通过反射实现。</p>

<h3 id="4枚举可与数据库交互">4）枚举可与数据库交互</h3>

<p>我们可以配合Mybatis将数据库字段转换为枚举类型。现在假设有一个数据库字段check_type的类型如下：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">`check_type`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'检查类型（1：未通过、2：通过）'</span><span class="p">,</span>
</code></pre></div></div>

<p>它对应的枚举类型为CheckType，代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="nc">CheckType</span> <span class="o">{</span>
	<span class="no">NO_PASS</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">"未通过"</span><span class="o">),</span> <span class="no">PASS</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"通过"</span><span class="o">);</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">key</span><span class="o">;</span>

	<span class="kd">private</span> <span class="nc">String</span> <span class="n">text</span><span class="o">;</span>

	<span class="kd">private</span> <span class="nf">CheckType</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">text</span> <span class="o">=</span> <span class="n">text</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getKey</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">key</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getText</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">text</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span><span class="nc">CheckType</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span><span class="nc">CheckType</span><span class="o">&gt;();</span>
	<span class="kd">static</span> <span class="o">{</span>
		<span class="k">for</span><span class="o">(</span><span class="nc">CheckType</span> <span class="n">d</span> <span class="o">:</span> <span class="nc">CheckType</span><span class="o">.</span><span class="na">values</span><span class="o">()){</span>
			<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">d</span><span class="o">.</span><span class="na">key</span><span class="o">,</span> <span class="n">d</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="nc">CheckType</span> <span class="nf">parse</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">index</span><span class="o">)){</span>
			<span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>CheckType枚举类比我们刚开始见到的那个Chenmo枚举类要复杂一些。</p>

<p>第一，CheckType新添加了构造方法，还有两个字段，key为int型，text为String型。</p>

<p>第二，CheckType中有一个<code class="highlighter-rouge">public static CheckType parse(Integer index)</code>方法，可将一个Integer通过key的匹配转化为枚举类型。</p>

<p>那么现在，我们可以在Mybatis的配置文件中使用<code class="highlighter-rouge">typeHandler</code>将数据库字段转化为枚举类型。</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;resultMap</span> <span class="na">id=</span><span class="s">"CheckLog"</span> <span class="na">type=</span><span class="s">"com.entity.CheckLog"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;id</span> <span class="na">property=</span><span class="s">"id"</span> <span class="na">column=</span><span class="s">"id"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;result</span> <span class="na">property=</span><span class="s">"checkType"</span> <span class="na">column=</span><span class="s">"check_type"</span> <span class="na">typeHandler=</span><span class="s">"com.CheckTypeHandler"</span><span class="nt">&gt;&lt;/result&gt;</span>
<span class="nt">&lt;/resultMap&gt;</span>
</code></pre></div></div>

<p>其中checkType字段对应的类如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CheckLog</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">CheckType</span> <span class="n">checkType</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">CheckType</span> <span class="nf">getCheckType</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">checkType</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCheckType</span><span class="o">(</span><span class="nc">CheckType</span> <span class="n">checkType</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">checkType</span> <span class="o">=</span> <span class="n">checkType</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>CheckTypeHandler转换器的类源码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CheckTypeHandler</span> <span class="kd">extends</span> <span class="nc">BaseTypeHandler</span><span class="o">&lt;</span><span class="nc">CheckType</span><span class="o">&gt;</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">CheckType</span> <span class="nf">getNullableResult</span><span class="o">(</span><span class="nc">ResultSet</span> <span class="n">rs</span><span class="o">,</span> <span class="nc">String</span> <span class="n">index</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">SQLException</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nc">CheckType</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">CheckType</span> <span class="nf">getNullableResult</span><span class="o">(</span><span class="nc">ResultSet</span> <span class="n">rs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">SQLException</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nc">CheckType</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">CheckType</span> <span class="nf">getNullableResult</span><span class="o">(</span><span class="nc">CallableStatement</span> <span class="n">cs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">SQLException</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nc">CheckType</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">cs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setNonNullParameter</span><span class="o">(</span><span class="nc">PreparedStatement</span> <span class="n">ps</span><span class="o">,</span> <span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="nc">CheckType</span> <span class="n">val</span><span class="o">,</span> <span class="nc">JdbcType</span> <span class="n">arg3</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">SQLException</span> <span class="o">{</span>
		<span class="n">ps</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">val</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>CheckTypeHandler 的核心功能就是调用CheckType枚举类的<code class="highlighter-rouge">parse()</code>方法对数据库字段进行转换。</p>

<h3 id="5枚举会比静态常量更消耗内存吗">5）枚举会比静态常量更消耗内存吗？</h3>

<p>说完枚举最常用的4个知识点后，我们来讨论一下“枚举会比静态常量更消耗内存吗？”这个话题——知乎上有人问这样的问题，还有很多人参与回答。</p>

<p>按我的理解，问这个问题的人就好像是在问“0.000,001”比“0.000,000,99”大吗？你说是吗？</p>

<hr />

<p>上一篇：<a href="http://www.itwanger.com/java/2019/11/08/java-fanshe.html">如果有人再问你 Java 的反射，把这篇文章扔给他</a></p>

<p>下一篇：<a href="http://www.itwanger.com/java/2019/11/08/java-annotation.html">Java注解（Annotation）：请不要小看我！</a></p>

<p>微信搜索「<strong>沉默王二</strong>」公众号，关注后回复「<strong>免费视频</strong>」获取 500G 高质量教学视频（<a href="https://mp.weixin.qq.com/s/GjkEyPW0vgIvuDLYQkBM0A">已分门别类</a>）。</p>

:ET