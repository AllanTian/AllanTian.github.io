I"6B<p>在逛 programcreek 的时候，我发现了一些专注基础但不容忽视的主题。比如说：Java 的可变参数究竟是怎么一回事？像这类灵魂拷问的主题，非常值得深入地研究一下。</p>

<!--more-->

<p><a href="https://mp.weixin.qq.com/s/feoOINGSyivBO8Z1gaQVOA">我</a>以前很不重视基础，觉得不就那么回事嘛，会用就行了。就比如说今天这个主题，管它可变不可变呢，不就是个参数嘛，还能有多大学问——抱着这种态度，我一直横行江湖近十载（苦笑）。可等到读者找我提一些基础的问题时，我几乎回答不上来，感觉知识是散的，或者是浮于表面的。幸好最近一段时间，我开始幡然醒悟，开始不放过任何一个细节，渐渐地，有点“知识储备”了。</p>

<p>好了，牛逼吹完，让我们来步入正题。Java 的可变参数究竟是怎么一回事？</p>

<p>可变参数是 Java 1.5 的时候引入的功能，它允许方法使用任意多个、类型相同（<code class="highlighter-rouge">is-a</code>）的值作为参数。就像下面这样。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">print</span><span class="o">(</span><span class="s">"沉"</span><span class="o">);</span>
    <span class="n">print</span><span class="o">(</span><span class="s">"沉"</span><span class="o">,</span> <span class="s">"默"</span><span class="o">);</span>
    <span class="n">print</span><span class="o">(</span><span class="s">"沉"</span><span class="o">,</span> <span class="s">"默"</span><span class="o">,</span> <span class="s">"王"</span><span class="o">);</span>
    <span class="n">print</span><span class="o">(</span><span class="s">"沉"</span><span class="o">,</span> <span class="s">"默"</span><span class="o">,</span> <span class="s">"王"</span><span class="o">,</span> <span class="s">"二"</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">strs</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">strs</span><span class="o">)</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>静态方法 <code class="highlighter-rouge">print()</code> 就使用了可变参数，所以 <code class="highlighter-rouge">print("沉")</code> 可以，<code class="highlighter-rouge">print("沉", "默")</code> 也可以，甚至 3 个、 4 个或者更多个字符串都可以作为参数传递给 <code class="highlighter-rouge">print()</code> 方法。</p>

<p>说到可变参数，我想起来阿里巴巴开发手册上有这样一条规约。</p>

<p><img src="http://www.itwanger.com/assets/images/2019/12/java-varargs-1.png" alt="" /></p>

<p>意思就是尽量不要使用可变参数，如果要用的话，可变参数必须要在参数列表的最后一位。既然坑位有限，只能在最后，那么可变参数就只能有一个（悠着点，悠着点）。如果可变参数不在最后一位，IDE 就会提示对应的错误，如下图所示。</p>

<p><img src="http://www.itwanger.com/assets/images/2019/12/java-varargs-2.png" alt="" /></p>

<p>那可变参数是怎么工作的呢？</p>

<p>原理也很简单。<strong>当使用可变参数的时候，实际上是先创建了一个数组，该数组的大小就是可变参数的个数，然后将参数放入数组当中，再将数组传递给被调用的方法</strong>。</p>

<p>这就是为什么可以使用数组作为参数来调用带有可变参数的方法的根本原因。代码如下所示。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">print</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span><span class="s">"沉"</span><span class="o">});</span>
    <span class="n">print</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span><span class="s">"沉"</span><span class="o">,</span> <span class="s">"默"</span><span class="o">});</span>
    <span class="n">print</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span><span class="s">"沉"</span><span class="o">,</span> <span class="s">"默"</span><span class="o">,</span> <span class="s">"王"</span><span class="o">});</span>
    <span class="n">print</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span><span class="s">"沉"</span><span class="o">,</span> <span class="s">"默"</span><span class="o">,</span> <span class="s">"王"</span><span class="o">,</span> <span class="s">"二"</span><span class="o">});</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">strs</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">strs</span><span class="o">)</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>那如果方法的参数是一个数组，然后像使用可变参数那样去调用方法的时候，能行得通吗？大家感兴趣的话，不妨试一试（行不通，嘘）。</p>

<p>那一般什么时候使用可变参数呢？</p>

<p>可变参数，可变参数，顾名思义，当一个方法需要处理任意多个相同类型的对象时，就可以定义可变参数。Java 中有一个很好的例子，就是 String 类的 <code class="highlighter-rouge">format()</code> 方法，就像下面这样。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"年纪是: %d"</span><span class="o">,</span> <span class="mi">18</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"年纪是: %d 名字是: %s"</span><span class="o">,</span> <span class="mi">18</span><span class="o">,</span> <span class="s">"沉默王二"</span><span class="o">));</span>
</code></pre></div></div>

<p>PS：<code class="highlighter-rouge">%d</code> 表示将整数格式化为 10 进制整数，<code class="highlighter-rouge">%s</code> 表示输出字符串。</p>

<p>如果不使用可变参数，那需要格式化的参数就必须使用“+”号操作符拼接起来了。麻烦也就惹祸上身了。</p>

<p>在实际的项目代码中，开源包 slf4j.jar 的日志输出就经常要用到可变参数（log4j 就没法使用可变参数，日志中需要记录多个参数时就痛苦不堪了）。就像下面这样。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protected</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>
<span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"名字是{}"</span><span class="o">,</span> <span class="n">mem</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
<span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"名字是{}，年纪是{}"</span><span class="o">,</span> <span class="n">mem</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">mem</span><span class="o">.</span><span class="na">getAge</span><span class="o">());</span>
</code></pre></div></div>

<p>查看源码就可以发现，<code class="highlighter-rouge">debug()</code> 方法使用的可变参数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">debug</span><span class="o">(</span><span class="nc">String</span> <span class="n">format</span><span class="o">,</span> <span class="nc">Object</span><span class="o">...</span> <span class="n">arguments</span><span class="o">);</span>
</code></pre></div></div>

<p>那在使用可变参数的时候有什么注意事项吗？</p>

<p>有的，有的。我们要避免重载带有可变参数的方法——这样很容易让编译器陷入自我怀疑中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">print</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">strs</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">a</span> <span class="o">:</span> <span class="n">strs</span><span class="o">)</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">Integer</span><span class="o">...</span> <span class="n">ints</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="n">i</span> <span class="o">:</span> <span class="n">ints</span><span class="o">)</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这时候，编译器完全不知道该调用哪个 <code class="highlighter-rouge">print()</code> 方法，<code class="highlighter-rouge">print(String... strs)</code> 还是 <code class="highlighter-rouge">print(Integer... ints)</code>，傻傻分不清。</p>

<p><img src="http://www.itwanger.com/assets/images/2019/12/java-varargs-3.png" alt="" /></p>

<p>假如真的需要重载带有可变参数的方法，就必须在调用方法的时候给出明确的指示，不要让编译器去猜。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="o">[]</span> <span class="n">strs</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="n">print</span><span class="o">(</span><span class="n">strs</span><span class="o">);</span>

    <span class="nc">Integer</span> <span class="o">[]</span> <span class="n">ints</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="n">print</span><span class="o">(</span><span class="n">ints</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">strs</span><span class="o">)</span> <span class="o">{</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">Integer</span><span class="o">...</span> <span class="n">ints</span><span class="o">)</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上面这段代码是可以编译通过的。因为编译器知道<a href="http://www.itwanger.com/java/2019/11/26/java-yinyong-value.html">实参</a>是 String 类型还是 Integer 类型，只不过为了运行时不抛出 <code class="highlighter-rouge">NullPointerException</code>，两个 <code class="highlighter-rouge">print()</code> 方法的内部要做好<a href="https://mp.weixin.qq.com/s/PBqR_uj6dd4xKEX8SUWIYQ">判空</a>的操作。</p>

<hr />

<p>好了各位读者朋友们，以上就是本文的全部内容了。<strong>能看到这里的都是人才，二哥必须要为你点个赞</strong>👍。如果觉得不过瘾，还想看到更多，我再给大家推荐几篇。</p>

<p><a href="http://www.itwanger.com/java/2019/12/08/java-array-string-length.html">灵魂拷问：Java 如何获取数组和字符串的长度？length 还是 length()？</a>
<a href="https://mp.weixin.qq.com/s/rLakWBPuWqYG8QT6ACetGQ">灵魂拷问：Java 的 substring() 是如何工作的？</a>
<a href="https://mp.weixin.qq.com/s/CRQrm5zGpqWxYL_ztk-b2Q">灵魂拷问：为什么 Java 字符串是不可变的？</a>
<a href="http://www.itwanger.com/java/2019/11/28/java-string-shuangyinhao-gouzaohanshu.html">灵魂拷问：创建 Java 字符串，用”“还是构造函数</a></p>

<p>如果你有什么问题需要我的帮助，或者想喷我了，欢迎留言哟。</p>

<p>养成好习惯！如果觉得这篇文章有点用的话，<strong>求点赞、求关注、求分享、求留言</strong>，这将是我写下去的最强动力！如果大家想要第一时间看到二哥更新的文章，可以扫描下方的二维码，关注我的公众号。我们下篇文章见！</p>

:ET