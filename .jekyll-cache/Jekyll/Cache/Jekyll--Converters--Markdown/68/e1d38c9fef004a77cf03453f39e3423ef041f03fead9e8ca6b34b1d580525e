I"Ѐ<p>昨天下午 5 点 10 分左右，我解决掉了最后一个 bug，轻舒一口气，准备关机下班。可这个时候，老板朝我走来，脸上挂着神秘的微笑，我就知道他不怀好意。果不其然，他扔给了我一个新的需求，要我在 Java 中解析 JSON，并且要在半个小时候给出最佳的解决方案。</p>

<!--more-->

<p><img src="http://www.itwanger.com/assets/images/2020/01/java-json-parse-01.png" alt="" /></p>

<p>无奈，提前下班的希望破灭了。不过，按时下班的希望还是有的。于是我撸起袖子开始了研究，结果出乎我的意料，竟然不到 10 分钟就找出了最佳方案。但我假装还没有搞出来，趁着下班前的这段时间把方案整理成了现在你们看到的这篇文章。</p>

<h3 id="01json-是什么">01、JSON 是什么</h3>

<p><strong>JSON</strong>（JavaScript Object Notation）是一种轻量级的数据交换格式，易于阅读和编写，机器解析和生成起来更是轻而易举。JSON 采用了完全独立于编程语言的文本格式，但它的格式非常符合 C 语言家族的习惯（比如 C、C++、C#、Java、JavaScript、Python 等）。 这种特质使得 JSON 成为了最理想的数据交换格式。</p>

<p>JSON 建构于两种常见的数据结构：</p>

<ul>
  <li>“键/值”对。</li>
  <li>数组。</li>
</ul>

<p>这使得 JSON 在同样基于这些结构的编程语言之间的交换成为可能。在 Java 中，解析 JSON 的第三方类库有很多，比如说下面这些。</p>

<p><img src="http://www.itwanger.com/assets/images/2020/01/java-json-parse-02.png" alt="" /></p>

<p>很多，对不对？但日常开发中，最常用的只有四个：Gson、Jackson、org.json 和阿里巴巴的 fastjson。下面我们来简单地对比下。</p>

<h3 id="02gson">02、Gson</h3>

<p>Gson 是谷歌提供的一个开源库，可以将 Java 对象序列化为 JSON 字符串，同样可以将 JSON 字符串反序列化（解析）为匹配的 Java 对象。</p>

<p>使用 Gson 之前，需要先在项目中引入 Gson 的依赖。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
	&lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;
	&lt;artifactId&gt;gson&lt;/artifactId&gt;
	&lt;version&gt;2.8.6&lt;/version&gt;
	&lt;scope&gt;compile&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<p><strong>1）简单示例</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Gson</span><span class="o">();</span>
<span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="mi">18</span><span class="o">);</span>            <span class="c1">// ==&gt; 18</span>
<span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="s">"沉默王二"</span><span class="o">);</span>       <span class="c1">// ==&gt; "沉默王二"</span>
</code></pre></div></div>

<p>上面这段代码通过 <code class="highlighter-rouge">new</code> 关键字创建了一个 Gson 对象，然后调用其 <code class="highlighter-rouge">toJson()</code> 方法将整形和字符串转成了 JSON 字符串。</p>

<p>同样，可以调用 <code class="highlighter-rouge">fromJson()</code> 方法将简单的 JSON 字符串解析为整形和字符串。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">one</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="s">"18"</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">Integer</span> <span class="n">one1</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="s">"18"</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="s">"\"沉默王二\""</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>2）复杂点的示例</strong></p>

<p>Cmower 类有两个字段：整形 age 和 字符串 name。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Cmower</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">18</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"沉默王二"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>将其转成 JSON 字符串。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Gson</span><span class="o">();</span>
<span class="nc">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="k">new</span> <span class="nc">Cmower</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">json</span><span class="o">);</span>
</code></pre></div></div>

<p>输出结果为：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{"age":18,"name":"沉默王二"}
</code></pre></div></div>

<p>可以再通过 <code class="highlighter-rouge">fromJson()</code> 方法将字符串 json 解析为 Java 对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="nc">Cmower</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>3）数组示例</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Gson</span><span class="o">();</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">ints</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
<span class="nc">String</span><span class="o">[]</span> <span class="n">strings</span> <span class="o">=</span> <span class="o">{</span><span class="s">"沉"</span><span class="o">,</span> <span class="s">"默"</span><span class="o">,</span> <span class="s">"王二"</span><span class="o">};</span>

<span class="c1">// 转成 JSON 字符串</span>
<span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">ints</span><span class="o">);</span>     <span class="c1">// ==&gt; [1,2,3,4,5]</span>
<span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">strings</span><span class="o">);</span>  <span class="c1">// ==&gt; ["沉", "默", "王二"]</span>

<span class="c1">// 解析为数组</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">ints2</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="s">"[1,2,3,4,5]"</span><span class="o">,</span> <span class="kt">int</span><span class="o">[].</span><span class="na">class</span><span class="o">);</span>
<span class="nc">String</span><span class="o">[]</span> <span class="n">strings2</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="s">"[\"沉\", \"默\", \"王二\"]"</span><span class="o">,</span> <span class="nc">String</span><span class="o">[].</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p>数组的处理仍然非常简单，调用的方法也仍然是 <code class="highlighter-rouge">toJson()</code> 和 <code class="highlighter-rouge">fromJson()</code> 方法。</p>

<p><strong>4）集合示例</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Gson</span><span class="o">();</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"沉"</span><span class="o">,</span> <span class="s">"默"</span><span class="o">,</span> <span class="s">"王二"</span><span class="o">));</span>
<span class="nc">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">list</span><span class="o">);</span> <span class="c1">// ==&gt; ["沉","默","王二"]</span>
</code></pre></div></div>

<p>把集合转成 JSON 字符串并没有什么特别之处，不过，把 JSON 字符串解析为集合就和之前的方法有些不同了。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Type</span> <span class="n">collectionType</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TypeToken</span><span class="o">&lt;</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;(){}.</span><span class="na">getType</span><span class="o">();</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="n">collectionType</span><span class="o">);</span>
</code></pre></div></div>

<p>我们需要借助 <code class="highlighter-rouge">com.google.gson.reflect.TypeToken</code> 和 <code class="highlighter-rouge">java.lang.reflect.Type</code> 来获取集合的类型，再将其作为参数传递给 <code class="highlighter-rouge">formJson()</code> 方法，才能将 JSON 字符串解析为集合。</p>

<p>Gson 虽然可以将任意的 Java 对象转成 JSON 字符串，但将字符串解析为指定的集合类型时就需要花点心思了，因为涉及到了泛型——TypeToken 是解决这个问题的银弹。</p>

<p>关于 Gson，我们就先说到这吧，以后有机会的时候再和大家细说。</p>

<h3 id="03jackson">03、Jackson</h3>

<p>Jackson 是基于 Stream 构建的一款用来序列化和反序列化 JSON 的 Java 开源库，社区非常活跃，其版本的更新速度也比较快。</p>

<ul>
  <li>截止到目前，GitHub 上已经星标 5.2K 了；</li>
  <li>Spring MVC 的默认 JSON 解析器；</li>
  <li>与 Gson 相比，Jackson 在解析大的 JSON 文件时速度更快。</li>
  <li>与 fastjson 相比，Jackson 更稳定。</li>
</ul>

<p>在使用 Jackson 之前，需要先添加 Jackson 的依赖。</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>jackson-databind<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.9.1<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>Jackson 的核心模块由三部分组成。</p>

<ul>
  <li>jackson-core，核心包，提供基于”流模式”解析的相关 API，它包括 JsonPaser 和 JsonGenerator。</li>
  <li>jackson-annotations，注解包，提供标准注解功能。</li>
  <li>jackson-databind ，数据绑定包， 提供基于”对象绑定” 解析的相关 API （ ObjectMapper ） 和”树模型” 解析的相关 API （JsonNode）；基于”对象绑定” 解析的 API 和”树模型”解析的 API 依赖基于”流模式”解析的 API。</li>
</ul>

<p>当添加 jackson-databind 之后， jackson-core 和 jackson-annotations 也随之添加到 Java 项目工程中。</p>

<p>这里顺带推荐一个 IDEA 插件：JsonFormat，可以将 JSON 字符串生成一个 JavaBean。怎么使用呢？可以新建一个类，然后调出  Generate 菜单。</p>

<p><img src="http://www.itwanger.com/assets/images/2020/01/java-json-parse-03.png" alt="" /></p>

<p>选择 JsonFormat，输入 JSON 字符串。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "age" : 18,
  "name" : "沉默王二"
}
</code></pre></div></div>

<p>确认后生成 JavaBean，生成的内容如下所示。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cmower</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">age</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Cmower</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">Cmower</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">age</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>那怎么使用 Jackson 呢？上文已经提到，ObjectMapper 是 Jackson 最常用的 API，我们来看一个简单的示例。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Cmower</span> <span class="n">wanger</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Cmower</span><span class="o">(</span><span class="mi">18</span><span class="o">,</span><span class="s">"沉默王二"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">wanger</span><span class="o">);</span>

<span class="nc">ObjectMapper</span> <span class="n">mapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
<span class="nc">String</span> <span class="n">jsonString</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">writerWithDefaultPrettyPrinter</span><span class="o">().</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">wanger</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jsonString</span><span class="o">);</span>

<span class="nc">Cmower</span> <span class="n">deserialize</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">jsonString</span><span class="o">,</span><span class="nc">Cmower</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">deserialize</span><span class="o">);</span>
</code></pre></div></div>

<p>ObjectMapper 通过 <code class="highlighter-rouge">writeValue()</code> 的系列方法可以将 Java 对象序列化为 JSON，并将 JSON 存储成不同的格式。</p>

<ul>
  <li>String（writeValueAsString）</li>
  <li>Byte Array（writeValueAsBytes）</li>
</ul>

<p>ObjectMapper 通过 <code class="highlighter-rouge">readValue()</code> 系列方法可以从不同的数据源（String、Bytes）将 JSON 反序列化（解析）为 Java 对象。</p>

<p>程序输出结果为：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>com.cmower.java_demo.jackson.Cmower@214c265e
{
  "age" : 18,
  "name" : "沉默王二"
}
com.cmower.java_demo.jackson.Cmower@612fc6eb
</code></pre></div></div>

<p>在调用 <code class="highlighter-rouge">writeValue()</code> 或者 <code class="highlighter-rouge">readValue()</code> 方法之前，往往需要对 JSON 和 JavaBean 之间进行一些定制化配置。</p>

<p>1）在反序列化时忽略在 JSON 中存在但 JavaBean 不存在的字段</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="nc">DeserializationFeature</span><span class="o">.</span><span class="na">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</code></pre></div></div>

<p>2）在序列化时忽略值为 null 的字段</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">apper</span><span class="o">.</span><span class="na">setSerializationInclusion</span><span class="o">(</span><span class="nc">Include</span><span class="o">.</span><span class="na">NON_NULL</span><span class="o">);</span> 
</code></pre></div></div>

<p>有些时候，这些定制化的配置对 JSON 和 JavaBean 之间的转化起着重要的作用。如果需要更多配置信息，查看 DeserializationFeature、SerializationFeature 和 Include 类的 Javadoc 即可。</p>

<p>关于 Jackson，我们就说到这吧，以后有机会的时候再和大家细说。</p>

<h3 id="04orgjson">04、org.json</h3>

<p>org.json 是 JSON 官方提供的一个开源库，不过使用起来就略显繁琐了。</p>

<p>使用 org.json 之前，需要先在项目中引入 org.json 的依赖。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.json&lt;/groupId&gt;
    &lt;artifactId&gt;json&lt;/artifactId&gt;
    &lt;version&gt;20190722&lt;/version&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<p><code class="highlighter-rouge">org.json.JSONObject</code> 类可以通过 new 关键字将 JSON 字符串解析为 Java 对象，然后 get 的系列方法获取对应的键值，代码示例如下所示。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"{ \"name\": \"沉默王二\", \"age\": 18 }"</span><span class="o">;</span>
<span class="nc">JSONObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JSONObject</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">"age"</span><span class="o">);</span>
</code></pre></div></div>

<p>调用 <code class="highlighter-rouge">org.json.JSONObject</code> 类的 <code class="highlighter-rouge">getJSONArray()</code> 方法可以返回一个表示数组的<code class="highlighter-rouge">org.json.JSONArray</code> 对象，再通过循环的方式可以获取数组中的元素，代码示例如下所示。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"{ \"number\": [3, 4, 5, 6] }"</span><span class="o">;</span>
<span class="nc">JSONObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JSONObject</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
<span class="nc">JSONArray</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="na">getJSONArray</span><span class="o">(</span><span class="s">"number"</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果想获取 JSON 字符串，可以使用 <code class="highlighter-rouge">put()</code> 方法将键值对放入 <code class="highlighter-rouge">org.json.JSONObject</code> 对象中，再调用 <code class="highlighter-rouge">toString()</code> 方法即可，代码示例如下所示。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">JSONObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JSONObject</span><span class="o">();</span>
<span class="n">obj</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span><span class="s">"沉默王二"</span><span class="o">);</span>
<span class="n">obj</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span><span class="mi">18</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">obj</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span> <span class="c1">// {"name":"沉默王二","age":18}</span>
</code></pre></div></div>

<p>相比较于 Gson 和 Jackson 来说，org.json 就要逊色多了，不仅不够灵活，API 也不够丰富。</p>

<h3 id="05fastjson">05、fastjson</h3>

<p>fastjson 是阿里巴巴开源的 JSON 解析库，它可以解析 JSON 格式的字符串，也支持将 Java Bean 序列化为 JSON 字符串。</p>

<p>fastjson 相对于其他 JSON 库的特点就是快，另外 API 使用起来也非常简单，更是在 2012 年被开源中国评选为最受欢迎的国产开源软件之一。</p>

<p>PS：尽管 fastjson 值得信赖，但也闹过不少腥风血雨，这里就不提了。</p>

<p>在使用 fastjson 之前，需要先添加 fastjson 的依赖。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
    &lt;version&gt;1.2.61&lt;/version&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<p>那怎么使用 fastjson 呢？我们来创建一个 Java Bean，有三个字段：年龄 age，名字 name，列表 books。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Cmower1</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">age</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">books</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">Cmower1</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">age</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
   <span class="c1">// getter/setter</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">putBook</span><span class="o">(</span><span class="nc">String</span> <span class="n">bookname</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">books</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">bookname</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后我们使用 <code class="highlighter-rouge">JSON.toJSONString()</code> 将 Java 对象序列化为 JSON 字符串，代码示例如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Cmower1</span> <span class="n">cmower</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Cmower1</span><span class="o">(</span><span class="mi">18</span><span class="o">,</span><span class="s">"沉默王二"</span><span class="o">);</span>
<span class="n">cmower</span><span class="o">.</span><span class="na">putBook</span><span class="o">(</span><span class="s">"《Web全栈开发进阶之路》"</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">jsonString</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">cmower</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jsonString</span><span class="o">);</span>
</code></pre></div></div>

<p>程序输出：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{"age":18,"books":["《Web全栈开发进阶之路》"],"name":"沉默王二"}
</code></pre></div></div>

<p>那如何解析 JSON 字符串呢？使用 <code class="highlighter-rouge">JSON.parseObject()</code> 方法，代码示例如下所示。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">jsonString</span><span class="o">,</span> <span class="nc">Cmower1</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</code></pre></div></div>

<h3 id="06总结">06、总结</h3>

<p>就我个人而言，我是比较推崇 Gson 的，毕竟是谷歌出品的，品质值得信赖，关键是用起来也确实比较得劲。</p>

<p>Jackson 呢，在解析大的 JSON 文件时速度更快，也比 fastjson 稳定。</p>

<p>fastjson 呢，作为我们国产开源软件中的骄傲，嗯，值得尊敬。</p>

<p>令我意外的是，org.json 在 StackOverflow 上一个 160 万浏览量的提问中，牢牢地占据头名答案。更令我想不到的是，老板竟然也选择了 org.json，说它比较原生，JSON 官方的亲儿子。</p>

<p>我。。。。。。</p>

<p><img src="http://www.itwanger.com/assets/images/2020/01/java-json-parse-04.png" alt="" /></p>

<h3 id="07鸣谢">07、鸣谢</h3>

<p>好了，各位读者朋友们，以上就是本文的全部内容了。能看到这里的都是最优秀的程序员，升职加薪就是你了👍。如果觉得不过瘾，还想看到更多，我再推荐一篇给大家。</p>

<p><a href="https://mp.weixin.qq.com/s/67ENoPJx4qX29JU9O5NSpQ">还有一周就解放了，无心撸码，着急回家</a></p>

<p><strong>原创不易，如果觉得有点用的话，请不要吝啬你手中点赞的权力</strong>；如果想要第一时间看到二哥更新的文章，请扫描下方的二维码，关注沉默王二公众号。我们下篇文章见！</p>

<p><img src="http://www.itwanger.com/assets/images/cmower_3.png" alt="" /></p>
:ET