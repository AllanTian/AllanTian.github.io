I"wE<p>作为一个有着 8 年 Java 编程经验的 IT 老兵，说起来很惭愧，我被 Java 当中的四五个名词一直困扰着：<strong>对象、引用、堆、栈、堆栈</strong>（栈可同堆栈，因此是四个名词，也是五个名词）。每次我看到这几个名词，都隐隐约约觉得自己在被一只无形的大口慢慢地吞噬，只剩下满地的衣服碎屑（为什么不是骨头，因为骨头也好吃）。</p>

<!--more-->

<p>记得中学的课本上，有一篇名为《狂人日记》课文；那时候根本理解不了鲁迅写这篇文章要表达的中心思想，只觉得满篇的“<strong>吃人</strong>”令人心情压抑；老师在讲台上慷慨激昂的讲，大多数的同学同我一样，在课本面前“痴痴”的发呆。</p>

<p>十几年后，再读《狂人日记》，恍然如梦：</p>

<blockquote>
  <p>鲁迅先生以狂人的口吻，再现了动乱时期下中国人的精神状态，视角新颖，文笔细腻又不乏辛辣之味。</p>

  <p>当时的中国，混乱成了主色调。以清廷和孔教为主的封建旧思想还在潜移默化地影响着人们的思想，与此同时以革命和新思潮为主的现代思想已经开始了对大众灵魂的洗涤和冲击。</p>
</blockquote>

<p>最近，和沉默王二技术交流群（120926808）的群友们交流后，Java 中那四五个会吃人的名词：对象、引用、堆、栈、堆栈，似乎在脑海中也清晰了起来，尽管疑惑有时候仍然会在阴云密布时跑出来——正鉴于此，这篇文章恰好做一下归纳。</p>

<h3 id="一对象和引用">一、对象和引用</h3>

<p><strong>在 Java 中，尽管一切都可以看做是对象，但计算机操作的并非对象本身，而是对象的引用。</strong> 这话乍眼一看，似懂非懂。究竟什么是<a href="http://www.itwanger.com/java/2019/11/01/oop.html">对象</a>，什么又是引用呢？</p>

<p>先来看对象的定义：按照通俗的说法，<strong>每个对象都是某个类（class）的一个实例（instance）</strong>。那么，实例化的过程怎么描述呢？来看代码（类是 String）：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"我是对象张三"</span><span class="o">);</span>
<span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="s">"我是对象李四"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>在 Java 中，实例化指的就是通过关键字“new”来创建对象的过程</strong>。以上代码在运行时就会创建两个对象——”我是对象张三”和”我是对象李四”；现在，该怎么操作他们呢？</p>

<p>去过公园的同学应该会见过几个大爷，他们很有一番本领——个个都能把风筝飞得老高老高，徒留我们眼馋的份！风筝飞那么高，没办法直接用手拽着飞啊，全要靠一根长长的看不见的结实的绳子来牵引！操作 Java 对象也是这个理，得有一根绳——也就是接下来要介绍的“引用”（我们肉眼也常常看不见它）。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">zhangsan</span><span class="o">,</span> <span class="n">lisi</span><span class="o">;</span>
<span class="n">zhangsan</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"我是对象张三"</span><span class="o">);</span>
<span class="n">lisi</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"我是对象李四"</span><span class="o">);</span>
</code></pre></div></div>

<p>这三行代码该怎么理解呢？</p>

<p>先来看第一行代码：<code class="highlighter-rouge">String zhangsan, lisi;</code>——声明了两个变量 zhangsan 和 lisi，他们的类型为 String。</p>

<p>①、==歧义==：zhangsan 和 lisi 此时被称为引用。</p>

<p>你也许听过这样一句古文：“<strong>神之于形，犹利之于刀；未闻刀没而利存，岂容形亡而神在？</strong>”这是无神论者范缜（zhen）的名言，大致的意思就是：灵魂对于肉体来说，就像刀刃对于刀身；从没听说过刀身都没了刀刃还存在，那么怎么可能允许肉体死亡了而灵魂还在呢？</p>

<p><strong>“引用”之于对象，就好比刀刃之于刀身，对象还没有创建，又怎么存在对象的“引用”呢？</strong></p>

<p>如果 zhangsan 和 lisi 此时不能被称为“引用”，那么他们是什么呢？答案很简单，就是变量啊！（鄙人理解）</p>

<p>②、==误解==：zhangsan 和 lisi 此时的默认值为 <code class="highlighter-rouge">null</code>。</p>

<p>应该说 zhangsan 和 lisi 此时的值为 <code class="highlighter-rouge">undefined</code>——借用 JavaScript 的关键字；也就是未定义；或者应该是一个新的关键字 <code class="highlighter-rouge">uninitialized</code>——未初始化。但不管是 <code class="highlighter-rouge">undefined</code> 还是 <code class="highlighter-rouge">uninitialized</code>，都与 <code class="highlighter-rouge">null</code> 不同。</p>

<p>既然没有初始化，zhangsan 和 lisi 此时就不能被使用。假如强行使用的话，编译器就会报错，提醒 zhangsan 和 lisi 还没有出生（初始化）；见下图。</p>

<p><img src="http://www.itwanger.com/assets/images/2019/11/java-eat-human-words-1.png" alt="" /></p>

<p>如果把 zhangsan 和 lisi 初始化为 <code class="highlighter-rouge">null</code>，编译器是认可的（见下图）；由此可见，zhangsan 和 lisi 此时的默认值不为 <code class="highlighter-rouge">null</code>。</p>

<p><img src="http://www.itwanger.com/assets/images/2019/11/java-eat-human-words-2.png" alt="" /></p>

<p>再来看第二行代码：<code class="highlighter-rouge">zhangsan = new String("我是对象张三");</code>——创建“我是对象张三”的 String 类对象，并将其赋值给 zhangsan 这个变量。</p>

<p>此时，zhangsan 就是”我是对象张三”的引用；“=”操作符赋予了 zhangsan 这样神圣的权利。</p>

<p>第三行代码 <code class="highlighter-rouge">lisi = new String("我是对象李四");</code>和第二行代码 <code class="highlighter-rouge">zhangsan = new String("我是对象张三");</code>同理。</p>

<p>现在，我可以下这样一个结论了——<strong>对象是通过 <code class="highlighter-rouge">new</code> 关键字创建的；引用是依赖于对象的；<code class="highlighter-rouge">=</code> 操作符把对象赋值给了引用</strong>。</p>

<p>我们再来看这样一段代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">zhangsan</span><span class="o">,</span> <span class="n">lisi</span><span class="o">;</span>
<span class="n">zhangsan</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"我是对象张三"</span><span class="o">);</span>
<span class="n">lisi</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"我是对象李四"</span><span class="o">);</span>
<span class="n">zhangsan</span> <span class="o">=</span> <span class="n">lisi</span><span class="o">;</span>
</code></pre></div></div>

<p>当 <code class="highlighter-rouge">zhangsan = lisi;</code> 执行过后，zhangsan 就不再是”我是对象张三”的引用了；zhangsan 和 lisi 指向了同一个对象（”我是对象李四”）；因此，你知道 <code class="highlighter-rouge">System.out.println(zhangsan == lisi);</code> 打印的是 <code class="highlighter-rouge">false</code> 还是 <code class="highlighter-rouge">true</code> 了吗？</p>

<h3 id="二堆栈堆栈">二、堆、栈、堆栈</h3>

<p>谁来告诉我，为什么有很多地方（书、博客等等）把栈叫做堆栈，把堆栈叫做栈？搞得我都头晕目眩了——绕着门柱估计转了 80 圈，不晕才怪！</p>

<p>我查了一下金山词霸，结果如下：</p>

<p><img src="http://www.itwanger.com/assets/images/2019/11/java-eat-human-words-3.png" alt="" /></p>

<p>我的天呐，更晕了，有没有！怎么才能不晕呢？我这里有几招武功秘籍，你们尽管拿去一睹为快：</p>

<p>1）以后再<strong>看到堆、栈、堆栈三个在一起打牌的时候，直接把“堆栈”踢出去</strong>；这仨人不适合在一起玩，因为堆和栈才是老相好；你“堆栈”来这插一脚算怎么回事；这世界上只存在“堆、栈”或者“堆栈”（标点符号很重要哦）。</p>

<p>2）<strong>堆是在程序运行时在内存中申请的空间（可理解为动态的过程）；切记，不是在编译时</strong>；因此，Java 中的对象就放在这里，这样做的好处就是：</p>

<blockquote>
  <p>当需要一个对象时，只需要通过 new 关键字写一行代码即可，当执行这行代码时，会自动在内存的“堆”区分配空间——这样就很灵活。</p>
</blockquote>

<p>另外，需要记住，<strong>堆遵循“先进后出”的规则</strong>（此处有雷）。就好像，一个和尚去挑了一担水，然后把一担水装缸里面，等到他口渴的时候他再用瓢舀出来喝。请放肆地打开你的脑洞脑补一下这个流程：缸底的水是先进去的，但后出来的。所以，我建议这位和尚在缸上贴个标签——保质期 90 天，过期饮用，后果自负！</p>

<p>还是记不住，看下图：</p>

<p><img src="http://www.itwanger.com/assets/images/2019/11/java-eat-human-words-4.png" alt="" /></p>

<p>（不好意思，这是鼎，不是缸，将就一下哈）</p>

<p>3）栈，又名堆栈（简直了，完全不符合程序员的思维啊，我们程序员习惯说一就是一，说二就是二嘛），能够和处理器（CPU，也就是脑子）直接关联，因此访问速度更快；举个十分不恰当的例子哈——<strong>眼睛相对嘴巴是离脑子近的一方，因此，你可以一目十行，但绝对做不到一开口就读十行字，哪怕十个字也做不到</strong>。</p>

<p>既然访问速度快，要好好利用啊！<strong>Java 就把对象的引用放在栈里</strong>。为什么呢？因为引用的使用频率高吗？</p>

<p>不是的，因为 Java 在编译程序时，必须明确的知道存储在栈里的东西的生命周期，否则就没法释放旧的内存来开辟新的内存空间存放引用——空间就那么大，前浪要把后浪拍死在沙滩上啊。</p>

<p>现在清楚堆、栈和堆栈了吧？</p>

<h3 id="三基本数据类型">三、基本数据类型</h3>

<p>先来看《Java 编程思想》中的一段话：</p>

<blockquote>
  <p>在程序设计中经常用到一系列类型，他们需要特殊对待。之所以特殊对待，是因为 new 将对象存储于“堆”中，故用 new 创建一个对象──特别小、简单的变量，往往不是很有效。因此，不用new来创建这类变量，而是创建一个并非是引用的变量，这个变量直接存储值，并置于栈中，因此更加高效。</p>
</blockquote>

<p>在 Java 中，这些基本类型有：boolean、char、byte、short、int、long、float、double 和 void；还有与之对应的包装器：Boolean、Character、Byte、Short、Integer、Long、Float、Double 和 Void；它们之间涉及到<a href="http://www.itwanger.com/java/2019/11/01/java-int-integer.html">装箱和拆箱</a>，点击链接。</p>

<p>看两行简单的代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</code></pre></div></div>

<p>这两行代码在编译的时候是什么样子呢？</p>

<p>编译器当然是先处理 <code class="highlighter-rouge">int a = 3;</code>，不然还能跳过吗？编译器在处理 <code class="highlighter-rouge">int a = 3;</code> 时在栈中创建了一个变量为 a 的内存空间，然后查找有没有字面值为 3 的地址，没找到，就开辟一个存放 3 这个字面值的地址，然后将 a 指向 3 的地址。</p>

<p>编译器忙完了 <code class="highlighter-rouge">int a = 3;</code>，就来接着处理 <code class="highlighter-rouge">int b = 3;</code>；在创建完 b 的变量后，由于栈中已经有 3 这个字面值，就将 b 直接指向 3 的地址；就不需要再开辟新的空间了。</p>

<p>依据上面的概述，我们假设在定义完 a 与 b 的值后，再令 a=4，此时 b 是等于 3 呢，还是 4 呢？</p>

<p>思考一下，再看答案哈。</p>

<p>答案揭晓：当编译器遇到 <code class="highlighter-rouge">a = 4;</code>时，它会重新搜索栈中是否有 4 的字面值，如果没有，重新开辟地址存放 4 的值；如果已经有了，则直接将 a 指向 4 这个地址；因此 a 值的改变不会影响到 b 的值哦。</p>

<p>最后，留个作业吧，下面这段代码在运行时会输出什么呢？</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test1</span> <span class="o">{</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

<span class="n">a</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>

<span class="no">TT</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="no">TT</span><span class="o">(</span><span class="s">"T"</span><span class="o">);</span>
<span class="no">TT</span> <span class="n">t1</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
<span class="n">t</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"TT"</span><span class="o">);</span>


<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t1</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
<span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">TT</span><span class="o">{</span>
<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

<span class="kd">public</span> <span class="nf">TT</span> <span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name1</span><span class="o">)</span> <span class="o">{</span>
<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name1</span><span class="o">;</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="四鸣谢">四、鸣谢</h3>

<p>好了各位读者朋友们，以上就是本文的全部内容了。<strong>能看到这里的都是最优秀的程序员，二哥必须要伸出大拇指为你点个赞</strong>👍。如果觉得不过瘾，还想看到更多，欢迎关注【沉默王二】公众号。回复关键字「Java」更有精选电子书相送，嘘。</p>
:ET