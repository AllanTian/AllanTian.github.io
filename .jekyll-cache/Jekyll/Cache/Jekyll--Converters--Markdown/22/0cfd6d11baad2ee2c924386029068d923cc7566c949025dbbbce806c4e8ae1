I";!<p><a href="https://mp.weixin.qq.com/s/HRAabyY-cLcAK_v9x0pMXw">上一篇</a>，我们谈了谈如何通过<strong>同步</strong>来保证共享变量的原子性（一个操作或者多个操作要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行），本篇我们来谈一谈如何保证共享变量的可见性（多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值）。</p>

<!--more-->

<p>我们使用<strong>同步</strong>的目的不仅是，不希望某个线程在使用对象状态时，另外一个线程在修改状态，这样容易造成混乱；我们还希望某个线程修改了对象状态后，其他线程能够看到修改后的状态——这就涉及到了一个新的名词：内存（可省略）可见性。</p>

<p>要了解可见性，我们得先来了解一下 Java 内存模型。</p>

<p>Java 内存模型（Java Memory Model，简称 JMM）描述了 Java 程序中各种变量（线程之间的共享变量）的访问规则，以及在 JVM 中将变量存储到内存→从内存中读取变量的底层细节。</p>

<p>要知道，所有的变量都是存储在主内存中的，每个线程会有自己独立的工作内存，里面保存了该线程使用到的变量副本（主内存中变量的一个拷贝）。见下图。</p>

<p><img src="http://www.itwanger.com/assets/images/2019/11/java-bingfa-3-1.png" alt="" /></p>

<p>也就是说，线程 1 对共享变量 chenmo 的修改要想被线程 2 及时看到，必须要经过 2 个步骤:</p>

<p>1、把工作内存 1 中更新过的共享变量刷新到主内存中。
2、将主内存中最新的共享变量的值更新到工作内存 2 中。</p>

<p>那假如共享变量没有及时被其他线程看到的话，会发生什么问题呢？</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Wanger</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="n">chenmo</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
			<span class="nd">@Override</span>
			<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
				<span class="k">while</span> <span class="o">(!</span><span class="n">chenmo</span><span class="o">)</span> <span class="o">{</span>
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">});</span>
		<span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
		<span class="n">chenmo</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>这段代码的本意是：在主线程中创建子线程，然后启动它，当主线程休眠 500 毫秒后，把共享变量 chenmo 的值修改为 true 的时候，子线程中的 while 循环停下来。但运行这段代码后，程序似乎进入了死循环，过了 N 个 500 毫秒，也没有要停下来的意思。</p>

<p>为什么会这样呢？</p>

<p>因为主线程对共享变量 chenmo 的修改没有及时通知到子线程（子线程在运行的时候，会将 chenmo 变量的值拷贝一份放在自己的工作内存当中），当主线程更改了 chenmo 变量的值之后，但是还没来得及写入到主存当中，那么子线程此时就不知道主线程对 chenmo 变量的更改，因此还会一直循环下去。</p>

<p>换句话说，就是：普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主内存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p>

<p>那怎么解决这个问题呢？</p>

<blockquote>
  <p>使用 volatile 关键字修饰共享变量 chenmo。</p>
</blockquote>

<p>因为 volatile 变量被线程访问时，会强迫线程从主内存中重读变量的值，而当变量被线程修改时，又会强迫线程将最近的值刷新到主内存当中。这样的话，线程在任何时候总能看到变量的最新值。</p>

<p>我们来使用 volatile 修饰一下共享变量 chenmo。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">chenmo</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</code></pre></div></div>

<p>再次运行代码后，程序在一瞬间就结束了，500 毫秒毕竟很短啊。在主线程（main 方法）将 chenmo 修改为 true 后，chenmo 变量的值立即写入到了主内存当中；同时，导致子线程的工作内存中缓存变量 chenmo 的副本失效了；当子线程读取 chenmo 变量时，发现自己的缓存副本无效了，就会去主内存读取最新的值(由 false 变为 true 了)，于是 while 循环也就停止了。</p>

<p>也就是说，在某种场景下，我们可以使用 volatile 关键字来安全地共享变量。这种场景之一就是：<strong>状态真正独立于程序内地其他内容，比如一个布尔状态标志（从 false 到 true，也可以再转换到 false），用于指示发生了一个重要的一次性事件</strong>。</p>

<p>至于 volatile 的原理和实现机制，本篇不再深入展开了（小编自己没搞懂，尴尬而不失礼貌的笑一笑）。</p>

<p>需要再次强调地是：</p>

<blockquote>
  <p>volatile 变量可以被看作是一种 “程度较轻的 synchronized”；与 synchronized 相比，volatile 变量运行时地开销比较少，但是它所能实现的功能也仅是 synchronized 的一部分（只能确保可见性，不能确保原子性）。</p>
</blockquote>

<p>原子性我们<a href="https://mp.weixin.qq.com/s/HRAabyY-cLcAK_v9x0pMXw">上一篇</a>已经讨论过了，增量操作（i++）看上去像一个单独操作，但实际上它是一个由“读取－修改－写入”组成的序列操作，因此 volatile 并不能为其提供必须的原子特性。</p>

<p>除了 volatile 和 synchronized，Lock 也能够保证可见性，它能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。关于 Lock 的更多细节，我们后面再进行讨论。</p>

<p>好了，共享变量的可见性就先介绍到这。希望本篇文章能够对大家有所帮助，谢谢大家的阅读。</p>

<p>上一篇：<a href="http://www.itwanger.com/java/2019/11/09/java-bingfa-2.html">如何保证共享变量的原子性？</a></p>

<p>下一篇：<a href="http://www.itwanger.com/java/2019/11/09/java-bingfa-4.html">如何保证对象的线程安全性</a></p>

<p>微信搜索「<strong>沉默王二</strong>」公众号，关注后回复「<strong>免费视频</strong>」获取 500G 高质量教学视频（<a href="https://mp.weixin.qq.com/s/GjkEyPW0vgIvuDLYQkBM0A">已分门别类</a>）。</p>

:ET