I"6<p>在逛 programcreek 的时候，发现了一些精妙绝伦的主题。比如说：为什么 Java 字符串是不可变的？像这类灵魂拷问的主题，非常值得深思。</p>

<!--more-->

<p>对于绝大多数的初级程序员来说，往往停留在“知其然不知其所以然”的层面上——会用，但要说底层的原理，可就只能挠挠头双手一摊一张问号脸了。</p>

<p>很长一段时间内，<a href="https://mp.weixin.qq.com/s/feoOINGSyivBO8Z1gaQVOA">我</a>也一直处于这种层面上。导致的局面就是，我在挖一些高深点的技术方案时，往往束手无策；在读一些高深点的技术文章时，往往理解不了作者在说什么。</p>

<p>借此机会，我就和大家一起，对“为什么 Java 字符串是不可变的”进行一次深入地研究。注意了，准备打怪升级了！</p>

<h3 id="01图文分析">01、图文分析</h3>

<p>来看下面这行代码。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">alita</span> <span class="o">=</span> <span class="s">"阿丽塔"</span><span class="o">;</span>
</code></pre></div></div>

<p>这行代码在字符串常量池中创建了一个内容为“阿丽塔”的对象，并将其赋值给了字符串变量 alita（存储的是字符串对象”阿丽塔”的引用）。如下图所示。</p>

<p><img src="http://www.itwanger.com/assets/images/2019/12/java-string-bukebian-1.png" alt="" /></p>

<p>再来看下面这行代码。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">wanger</span> <span class="o">=</span> <span class="n">alita</span><span class="o">;</span>
</code></pre></div></div>

<p>这行代码将字符串变量 alita 赋值给了字符串变量 wanger。这时候，wanger 和 alita 存储的是同一个字符串对象的引用。如下图所示。</p>

<p><img src="http://www.itwanger.com/assets/images/2019/12/java-string-bukebian-2.png" alt="" /></p>

<p>再来看下面这行代码。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">alita</span> <span class="o">=</span> <span class="s">"战斗天使"</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="n">alita</span><span class="o">);</span>
</code></pre></div></div>

<p>这行代码将字符串“战斗天使”拼接在字符串变量 alita 的前面，并重新赋值给 alita。这个过程就比之前的复杂了。我们需要先来看看 <code class="highlighter-rouge">concat()</code> 方法做了什么，源码如下所示。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">String</span> <span class="nf">concat</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">otherLen</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">otherLen</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="o">[]</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">len</span> <span class="o">+</span> <span class="n">otherLen</span><span class="o">);</span>
    <span class="n">str</span><span class="o">.</span><span class="na">getChars</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="n">len</span><span class="o">);</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以看得出，<code class="highlighter-rouge">"战斗天使".concat(alita)</code> 这行代码会先在字符串常量池中创建一个新的字符串对象，内容为“战斗天使”，然后 <code class="highlighter-rouge">concat()</code> 方法会将其对应的字符数组和“阿丽塔”对应的字符数组复制到一个新的字符数组 buf 中，最后，再通过 new 关键字创建了一个新的字符串对象，并返回。如下图所示。</p>

<p><img src="http://www.itwanger.com/assets/images/2019/12/java-string-bukebian-3.png" alt="" /></p>

<p>从上图中可以得出结论，alita 此时引用的是在堆中新创建的字符串对象。</p>

<h3 id="02对象和对象引用">02、对象和对象引用</h3>

<p>可能有些读者看完上面的图文分析没有理解反而更疑惑了：alita 不是变了吗？从“阿丽塔”变为“战斗天使阿丽塔”？怎么还说字符串是不可变的呢？</p>

<p>这里需要给大家解释一下，<a href="http://www.itwanger.com/java/2019/11/05/java-eat-human-words.html">什么是对象</a>，什么是对象引用。</p>

<p>在 Java 中，由于不能直接操作对象本身，所以就有了对象引用这个概念，对象引用存储的是对象在内存中的地址。</p>

<p>PS：Java 虚拟机在执行程序的过程中会把内存区域划分为若干个不同的数据区域，如下图所示。</p>

<p><img src="http://www.itwanger.com/assets/images/2019/12/java-string-bukebian-4.png" alt="" /></p>

<p>对象存储在堆（heap）中，而对象的引用存储在栈（stack）中。</p>

<p>我们通常所说的“字符串是不可变的”是指“字符串对象是不可变的”。alita 是字符串对象“阿丽塔”或者“战斗天使阿丽塔”的引用。这下应该明白了吧？</p>

<h3 id="03源码分析">03、源码分析</h3>

<p>我们来看一下 String 类的部分源码。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">String</span>
    <span class="kd">implements</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span><span class="o">,</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;,</span> <span class="nc">CharSequence</span> <span class="o">{</span>
    <span class="cm">/** The value is used for character storage. */</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">char</span> <span class="n">value</span><span class="o">[];</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以看得出， String 类其实是通过操作字符数组 value 实现的。而 value 是 private 的，也没有提供 <code class="highlighter-rouge">serValue()</code> 这样的方法进行修改；况且 value 还是 final 的，意味着 value 一旦被初始化，就无法进行改变。</p>

<p>另外呢，String 类提供的方法，比如说 <code class="highlighter-rouge">substring()</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">String</span> <span class="nf">substring</span><span class="o">(</span><span class="kt">int</span> <span class="n">beginIndex</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">subLen</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">beginIndex</span><span class="o">;</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">beginIndex</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">?</span> <span class="k">this</span> <span class="o">:</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">beginIndex</span><span class="o">,</span> <span class="n">subLen</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">toLowerCase()</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">String</span> <span class="nf">toLowerCase</span><span class="o">(</span><span class="nc">Locale</span> <span class="n">locale</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">len</span> <span class="o">+</span> <span class="n">resultOffset</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>还有之前提到的 <code class="highlighter-rouge">concat()</code>，看似都能改变字符串的内容，但其实都是在方法内部使用 new 关键字重新创建的新字符串对象。</p>

<h3 id="04为什么要不可变">04、为什么要不可变</h3>

<p>String 类的源码中还有一个重要的字段 hash，用来保存字符串对象的 hashCode。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">String</span>
    <span class="kd">implements</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span><span class="o">,</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;,</span> <span class="nc">CharSequence</span> <span class="o">{</span>

    <span class="cm">/** Cache the hash code for the string */</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">hash</span><span class="o">;</span> <span class="c1">// Default to 0</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">hash</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">h</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">char</span> <span class="n">val</span><span class="o">[]</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>

            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">h</span> <span class="o">=</span> <span class="mi">31</span> <span class="o">*</span> <span class="n">h</span> <span class="o">+</span> <span class="n">val</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="o">}</span>
            <span class="n">hash</span> <span class="o">=</span> <span class="n">h</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">h</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因为字符串是不可变的，所以一旦被创建，它的 hash 值就不会再改变了。由此字符串非常适合作为 HashMap 的 key 值，这样可以极大地提高效率。</p>

<p>另外呢，不可变对象天生是线程安全的，因此字符串可以在多个线程之间共享。</p>

<p>举个反面的例子，假如字符串是可变的，那么数据库的用户名和密码（字符串形式获得数据库连接）将不再安全，一些高手可以随意篡改，从而导致严重的安全问题。</p>

<h3 id="05最后">05、最后</h3>

<p>总结一下，字符串一旦在内存中被创建，就无法被更改。String 类的所有方法都不会改变字符串本身，而是返回一个新的字符串对象。如果需要一个可修改的字符序列，建议使用 StringBuffer 或 StringBuilder 类代替 String 类，否则每次创建的字新符串对象会导致 Java 虚拟机花费大量的时间进行垃圾回收。</p>

:ET