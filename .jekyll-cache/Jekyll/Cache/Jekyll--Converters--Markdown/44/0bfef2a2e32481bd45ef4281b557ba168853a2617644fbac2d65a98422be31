I"]t<h1 id="java变量">Java变量</h1>

<h3 id="前言">前言</h3>

<p>细心的小伙伴们有没有发现我前面在举例说常量的时候，提到了变量，很多小伙们肯定都猜到了，那既然有常量肯定就有变量，那就不多说了，我们直接进入主题，今天就来说下变量又是神马东西。</p>

<h2 id="定义">定义</h2>

<h3 id="变量">变量</h3>

<p>见名知意，广义就是：<strong>会变化的量</strong>。</p>

<p>小伙伴们都知道常量，它的值是不能被修改的，而变量的值就在程序运行过程中，其值可以被修改，会发生改变的量。Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。</p>

<h3 id="举例">举例</h3>

<p>在2D游戏程序中，需要代表人物的位置，则需要2个变量，一个是 x 坐标，一个是 y 坐标，而在程序运行过程中，这两个变量的值会发生改变。</p>

<h2 id="声明">声明</h2>

<h3 id="格式">格式</h3>

<p>Java是一种强类型语言，每个变量都必须声明其类型。</p>

<ul>
  <li>
    <p>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。</p>
  </li>
  <li>
    <p>变量在使用前必须对其声明, 只有在变量声明以后，才能为其分配相应长度的存储单元， 声明格式为：</p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">type</span> <span class="n">identifier</span> <span class="o">[</span> <span class="o">=</span> <span class="n">value</span><span class="o">][,</span> <span class="n">identifier</span> <span class="o">[=</span> <span class="n">value</span><span class="o">]</span> <span class="o">...]</span> <span class="o">;</span>
<span class="c1">// 数据类型 变量名 = 变量值;</span>
</code></pre></div></div>

<h3 id="举例-1">举例</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">teacher</span><span class="o">;</span>    <span class="c1">// String 类型的变量</span>
<span class="kt">boolean</span> <span class="n">weight</span><span class="o">;</span>    <span class="c1">// boolean 类型的变量</span>
<span class="kt">int</span> <span class="n">age</span><span class="o">;</span>    <span class="c1">// int 类型的变量</span>
</code></pre></div></div>

<h2 id="赋值">赋值</h2>

<h3 id="初始化">初始化</h3>

<p>初始化变量是指为变量指定一个明确的初始值。</p>

<p>初始化变量有两种方式：一种是<strong>声明时直接赋值</strong>，一种是<strong>先声明、后赋值</strong>。</p>

<p>如下代码分别使用两种方式对变量进行了初始化。</p>

<h3 id="举例-2">举例</h3>

<p><strong>声明时直接赋值</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">char</span> <span class="n">sex</span> <span class="o">=</span> <span class="sc">'男'</span><span class="o">;</span>    <span class="c1">// 直接赋值</span>
</code></pre></div></div>

<p><strong>先声明、后赋值</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>String name;    // 先声明
name ="小明";    // 后赋值
</code></pre></div></div>

<p>此外，多个同类型的变量可以同时定义或者初始化，但是多个变量中间要使用逗号分隔，声明结束时用分号分隔。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">name</span> <span class="o">,</span> <span class="n">address</span> <span class="o">,</span> <span class="n">sex</span> <span class="o">,</span>  <span class="n">synopsis</span> <span class="o">;</span>    <span class="c1">// 声明多个变量</span>
<span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">28</span> <span class="o">,</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">32</span> <span class="o">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">;</span>    <span class="c1">// 声明并初始化多个变量</span>
</code></pre></div></div>

<h3 id="总举例">总举例</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">;</span>         <span class="c1">// 声明三个int型整数：a、 b、c</span>
<span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">3</span><span class="o">,</span> <span class="n">e</span> <span class="o">=</span> <span class="mi">4</span><span class="o">,</span> <span class="n">f</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span> <span class="c1">// 声明三个整数并赋予初值</span>
<span class="kt">byte</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">22</span><span class="o">;</span>         <span class="c1">// 声明并初始化 z</span>
<span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"runoob"</span><span class="o">;</span>  <span class="c1">// 声明并初始化字符串 s</span>
<span class="kt">double</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="o">;</span> <span class="c1">// 声明了双精度浮点型变量 pi</span>
<span class="kt">char</span> <span class="n">x</span> <span class="o">=</span> <span class="sc">'x'</span><span class="o">;</span>        <span class="c1">// 声明变量 x 的值是字符 'x'</span>
</code></pre></div></div>

<h3 id="初始化变量注意">初始化变量注意</h3>

<ul>
  <li>
    <p>变量是类或者结构中的字段，如果没有显式地初始化，默认状态下创建变量并默认初始值为 0。</p>
  </li>
  <li>
    <p>方法中的变量必须显式地初始化，否则在使用该变量时就会出错。</p>
  </li>
  <li>
    <p>如上方举例可以在一行中声明多个变量，但是不提倡这种风格，逐一声明每一个变量可以提高程序可读性。</p>
  </li>
  <li>
    <p>可以将变量的声明和初始化放在同一行中</p>
  </li>
  <li>
    <p>每个变量都有类型，类型可以是基本类型，也可以是引用类型。</p>
  </li>
  <li>
    <p>变量名必须是合法的标识符。（具体标识符规则可查看此文章）</p>
  </li>
</ul>

<h3 id="为何使用变量">为何使用变量</h3>

<ul>
  <li>
    <p>在程序中，有一些代表相同意义的数据，在不断发生变化，例如：用户年龄</p>
  </li>
  <li>
    <p>定义一个不变的变量名称，表示那些不断变化的数字</p>
  </li>
  <li>
    <p>在内存中，其实就是一段内存空间，空间中的数据可以不断的变化</p>
  </li>
</ul>

<h2 id="作用域类型">作用域类型</h2>

<p>变量的作用域就是规定了变量所能使用的范围，只有在作用域范围内变量才能被使用。</p>

<p>因变量声明地点的不同，所以变量的作用域也不同。</p>

<p>而根据作用域的不同，一般将变量分为不同的类型：<strong>成员变量</strong>和<strong>局部变量</strong>。</p>

<p>下面对两种不同的类型进行详细说明。</p>

<h2 id="成员变量">成员变量</h2>

<p>Java 的成员变量有两种，分别是<strong>全局变量</strong>和<strong>静态变量</strong>（<code class="highlighter-rouge">类变量</code>）。</p>

<p>如定义在方法体和语句块之外，不属于任何一个方法的话，作用域就是整个类。</p>

<table>
  <thead>
    <tr>
      <th>名称</th>
      <th>修饰</th>
      <th>访问</th>
      <th>生命周期</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>全局变量（实例变量）</td>
      <td>无 static 修饰</td>
      <td>对象名.变量名</td>
      <td>只要对象被当作引用，实例变量就将存在</td>
    </tr>
    <tr>
      <td>静态变量（类变量）</td>
      <td>用 static 修饰</td>
      <td>类名.变量名或对象名.变量名</td>
      <td>其生命周期取决于类的生命周期。类被垃圾回收机制彻底回收时才会被销毁</td>
    </tr>
  </tbody>
</table>

<p><code class="highlighter-rouge">其作用域都是独立于方法之外的变量</code></p>

<h3 id="实例变量-全局变量">实例变量 （全局变量）</h3>

<ul>
  <li>
    <p>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</p>
  </li>
  <li>
    <p>当一个对象被实例化之后，每个实例变量的值就跟着确定；</p>
  </li>
  <li>
    <p>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</p>
  </li>
  <li>
    <p>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</p>
  </li>
  <li>
    <p>实例变量可以声明在使用前或者使用后；</p>
  </li>
  <li>
    <p>访问修饰符可以修饰实例变量；</p>
  </li>
  <li>
    <p>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</p>
  </li>
  <li>
    <p>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</p>
  </li>
  <li>
    <p>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</p>
  </li>
</ul>

<h3 id="举例-3">举例</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">People</span> <span class="o">{</span>

    <span class="c1">// 这个实例变量对子类可见</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="c1">// 私有变量，仅在该类可见</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
    <span class="c1">//在构造器中对name赋值</span>
    <span class="kd">public</span> <span class="nf">People</span> <span class="o">(</span><span class="nc">String</span> <span class="n">popName</span><span class="o">){</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">popName</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">//设定age的值</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// 打印信息</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printPop</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"名字 : "</span> <span class="o">+</span> <span class="n">name</span> <span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"年龄 : "</span> <span class="o">+</span> <span class="n">age</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="nc">People</span> <span class="n">people</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">People</span><span class="o">(</span><span class="s">"超Ren专属"</span><span class="o">);</span>
        <span class="n">people</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">28</span><span class="o">);</span>
        <span class="n">people</span><span class="o">.</span><span class="na">printPop</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>运行结果如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">javac</span> <span class="nc">People</span><span class="o">.</span><span class="na">java</span> 
<span class="err">$</span> <span class="n">java</span> <span class="nc">People</span>
<span class="n">名字</span> <span class="o">:</span> <span class="n">超Ren专属</span>
<span class="n">年龄</span> <span class="o">:</span> <span class="mi">28</span>
</code></pre></div></div>

<h3 id="类变量-静态变量">类变量 （静态变量）</h3>

<ul>
  <li>
    <p>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</p>
  </li>
  <li>
    <p>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</p>
  </li>
  <li>
    <p>静态变量除了被声明为常量外很少使用。常量是指声明为public/private，final和static类型的变量。常量初始化后不可改变。</p>
  </li>
  <li>
    <p>静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。</p>
  </li>
  <li>
    <p>静态变量在第一次被访问时创建，在程序结束时销毁。</p>
  </li>
  <li>
    <p>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。</p>
  </li>
  <li>
    <p>默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</p>
  </li>
  <li>
    <p>静态变量可以通过：ClassName.VariableName的方式访问。</p>
  </li>
  <li>
    <p>类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。</p>
  </li>
</ul>

<h3 id="举例-4">举例</h3>

<p>假设在一个类中声明了 4 个变量，下面编写一个测试类输出引起变量的值改变的示例代码。</p>

<p>变量声明代码如下所示：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyWork</span> <span class="o">{</span>

    <span class="c1">// 成员变量、实例变量</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="c1">// 成员变量、实例变量</span>
    <span class="kt">int</span> <span class="n">age</span> <span class="o">;</span>
    <span class="c1">// 成员变量、实例变量</span>
    <span class="kt">char</span> <span class="n">sex</span> <span class="o">=</span> <span class="sc">'男'</span><span class="o">;</span>
    <span class="c1">// 成员变量、静态变量(类变量)</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">nickName</span> <span class="o">=</span> <span class="s">"超Ren专属"</span><span class="o">;</span>
    <span class="c1">// 成员变量、静态变量(类变量)</span>
    <span class="kd">static</span> <span class="nc">String</span> <span class="no">CSDNURL</span> <span class="o">=</span> <span class="s">"https://blog.csdn.net/qq_39052513"</span><span class="o">;</span>

<span class="o">}</span>
</code></pre></div></div>
<p>测试类代码如下所示：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 创建类的对象</span>
        <span class="nc">MyWork</span> <span class="n">myWork</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyWork</span><span class="o">();</span>
        <span class="c1">// 对象名.变量名调用实例变量（全局变量）</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">myWork</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">myWork</span><span class="o">.</span><span class="na">age</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">myWork</span><span class="o">.</span><span class="na">sex</span><span class="o">);</span>
        <span class="c1">// 对象名.变量名调用静态变量（类变量）</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">myWork</span><span class="o">.</span><span class="na">nickName</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">myWork</span><span class="o">.</span><span class="na">CSDNURL</span><span class="o">);</span>
        <span class="c1">// 类名.变量名调用静态变量（类变量）</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">MyWork</span><span class="o">.</span><span class="na">nickName</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">MyWork</span><span class="o">.</span><span class="na">CSDNURL</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>运行结果如下所示:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kc">null</span>
<span class="mi">0</span>
<span class="n">男</span>
<span class="n">超Ren专属</span>
<span class="nl">https:</span><span class="c1">//blog.csdn.net/qq_39052513</span>
<span class="n">超Ren专属</span>
<span class="nl">https:</span><span class="c1">//blog.csdn.net/qq_39052513</span>
</code></pre></div></div>

<p>从变量声明代码可以看到定义了 4 个成员变量，由输出结果可以看出，name 和 age 显示系统默认初始化的值，sex、nickName 和 CSDNURL 显示初始化的值。且用 static final 修饰的变量必须赋予初始值。</p>

<h2 id="局部变量">局部变量</h2>

<ul>
  <li>
    <p>局部变量声明在方法、构造方法或者语句块中，是指在方法或方法代码块中定义的变量，其作用域是其所在的代码块。</p>
  </li>
  <li>
    <p>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</p>
  </li>
  <li>
    <p>访问修饰符不能用于局部变量；</p>
  </li>
  <li>
    <p>局部变量只在声明它的方法、构造方法或者语句块中可见；</p>
  </li>
  <li>
    <p>局部变量是在栈上分配的。</p>
  </li>
  <li>
    <p>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</p>
  </li>
</ul>

<p>可分为<strong>方法参数变量</strong>、<strong>方法局部变量</strong> 和 <strong>代码块局部变量</strong>三种。其作用域具体看下表</p>

<table>
  <thead>
    <tr>
      <th>名称</th>
      <th>作用域</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>方法参数变量（形参）</td>
      <td>在整个方法内有效</td>
    </tr>
    <tr>
      <td>方法局部变量（方法内定义）</td>
      <td>从定义这个变量开始到方法结束这一段时间内有效</td>
    </tr>
    <tr>
      <td>代码块局部变量（代码块内定义）</td>
      <td>从定义这个变量开始到代码块结束这一段时间内有效</td>
    </tr>
  </tbody>
</table>

<p><strong><code class="highlighter-rouge">局部变量在使用前必须被程序员主动初始化值</code></strong></p>

<h3 id="方法局部变量">方法局部变量</h3>

<p>声明一个局部变量age并输出其值其实现代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">popAge</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">age</span> <span class="o">=</span> <span class="n">age</span> <span class="o">+</span> <span class="mi">28</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"小明的年龄是: "</span> <span class="o">+</span> <span class="n">age</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Demo</span> <span class="n">demo</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Demo</span><span class="o">();</span>
        <span class="n">demo</span><span class="o">.</span><span class="na">popAge</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述实例中定义了 局部变量  age ，而 int 类型的 age 的作用域就限制在pupAge() 这个方法中
，在main方法中就无法使用</p>

<p>运行结果</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">小明的年龄是:</span> <span class="mi">28</span>
</code></pre></div></div>

<h3 id="方法参数变量">方法参数变量</h3>

<p>作为方法参数声明的变量的作用域是整个方法。</p>

<p>声明一个方法参数变量，实现代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">popName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"该用户的姓名为: "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">popName</span><span class="o">(</span><span class="s">"超Ren专属"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在上述实例中定义了一个 popName() 方法，该方法中包含一个 String 类型的参数变量 name，其作用域是 popName() 方法体内。当调用方法时传递进了一个参数 “超Ren专属” ，因此其输出控制台的 超Ren专属。</p>

<p>运行结果为：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">该用户的姓名为:</span> <span class="n">超Ren专属</span>
</code></pre></div></div>

<h3 id="代码块局部变量">代码块局部变量</h3>

<p>代码块局部变量一般常用于<code class="highlighter-rouge"> try  catch </code>代码块中，成为<strong>异常处理参数变量</strong>。</p>

<p>异常处理参数变量的作用域是在异常处理块中，该变量是将异常处理参数传递给异常处理块，与方法参数变量类似。</p>

<p>声明一个异常处理语句，实现代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">demo</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"欢迎来到异常处理代码块，我将为你捕获所有异常，并返回异常原因！"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 异常处理块，参数为 Exception 类型</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">demo</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>在上述实例中定义了异常处理语句，异常处理块 catch 的参数为 Exception 类型的变量 e，作用域是整个 catch 块。</p>

<h2 id="注意事项">注意事项</h2>

<ul>
  <li>
    <p>变量是有<strong>作用域</strong> 的。</p>

    <ul>
      <li>
        <p><strong>作用域</strong>：起作用的范围。</p>
      </li>
      <li>
        <p><strong>范围</strong>：变量在哪对大括号中声明定义的，范围就是哪对大括号</p>
      </li>
    </ul>
  </li>
  <li>
    <p>在同一个作用域中，<strong>不能定义重名</strong>的变量。</p>
  </li>
  <li>
    <p>在方法中定义的变量，必须<strong>先初始化再赋值</strong>，之后才能使用。</p>
  </li>
  <li>
    <p>定义变量可以将变量的声明和变量的赋值，<strong>分离</strong>。</p>

    <ul>
      <li>
        <p><strong>变量的定义</strong>：带着数据类型的写法，作用就是在内存中开辟一段空间</p>
      </li>
      <li>
        <p><strong>变量的使用</strong>：不带数据类型的写法，作用就是使用内存中已经开辟好的空间（要么是修改空间中的内容，要么是获取空间中的内容）</p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="总结">总结</h2>

<p>看到这里Java变量就已经到此结束啦，学会了你就会七十二般变化，想变神马就变🐎，无所不能！若有不足之处还望指点。</p>

:ET