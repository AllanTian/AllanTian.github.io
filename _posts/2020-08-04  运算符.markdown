# Java 运算符

## 前言

前面我们说了 Java的数据类型，有我们常见的整数类型，小数类型等等等等，那这些类型到底该如何使用呢，今天我就带大家遨游Java的知识海洋之Java运算符，看看Java是如何操作运算的，go go go !

## 定义

### 运算符


运算符就用于`执行程序代码运算`，会针对`一个以上操作数项目来进行运算`。指明对操作数的运算方式。`简单来说就是用于运算和操作数据的符号`。


例如：`2+3`，其操作数是 `2` 和 `3` ，而运算符则是“ `+` ”。

*运算符丰富是 Java 语言的主要特点之一，它提供的运算符数量之多，在高级语言中是少见的。*

小伙伴们看了秒懂什么是运算符，说起丰富的运算符，那到底是有多么丰富呢，接下来我就来说下Java中都有那些丰富的运算符，这些运算符都是如何使用的，接下来就要好好看了，别分心，我怕一不留神的你就会错失一次完美理解的机会🤫

## 分类

计算机的最基本用途之一就是执行数学运算，作为一门计算机语言，Java也提供了一套丰富的运算符来操纵变量。我们可以把运算符分成以下几类：

**算术运算符**、**关系运算符**、**位运算符**、**逻辑运算符**、**赋值运算符**、**其他运算符**

接下来我们就来详细的介绍这几类运算符。

*Look here* 🤪


### 算术运算符


#### 定义

算术运算符一般用在`数学表达式`中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。

表格中的实例假设整数变量 `A` 的值为 `10`，变量 `B` 的值为 `20`：

|  操作符   |  描述   |   实例  |
| --- | --- | --- |
|  +   |  正号   |  +A 等于 10   |
|   -  |  负号  |  –B 等于 -20   |
|  +   |  加法 - 相加运算符两侧的值   |  A + B 等于 30   |
|   -  |  减法 - 左操作数减去右操作数  |  A – B 等于 -10   |
|   *  |  乘法 - 相乘操作符两侧的值   |   A * B 等于 200  |
|   /  |  除法 - 左操作数除以右操作数  |  B / A 等于 2   |
|  ％  |  取余 - 左操作数除以右操作数的余数   |  B % A 等于 0   |
|   ++  |  自增: 操作数的值增加1   |  B++ 或 ++B 等于 21   |
|   --  |   自减: 操作数的值减少1  |   B-- 或 --B 等于 19 |
|  +   |  字符串拼接 - 拼接运算符两侧的值   |  "超" + "Ren" 等于 "超Ren"   |


#### 注意

其中有几个比较特殊，这里给大家强调下

- `+` ：`加法运算符`
  
  1. 表示正数
  
  2. 表示算数的加法
  
  3. 表示字符串的拼接，结果为String类型
  
- `-` ：`减法运算符`

  1. 表示负数
  
  2. 表示算数的减法
  
  
- `/` ：`除法运算符`
  
  1. 如果是两个整数相除，结果还是一个整数
  
 	2. 如果任意一个操作数是小数，那么结果就是小数
  
  
  
- `%` ：取模运算符、取余运算符

  1. 获取两数相除的余数
  
  2. 注意事项：取余的结果的符号只和 `%` 前面的操作数的符号有关
 	
  3. 作用：获取余数；判断是否整除；判断奇偶


#### 示例

下面的简单写一个示例程序演示算术运算符。


```java
public class SuanShu {

    public static void main(String[] args) {

        int a = 10;
        int b = 20;
        int c = 25;
        int d = 50;

        System.out.println("a + b = " + (a + b));
        System.out.println("a - b = " + (a - b));
        System.out.println("a * b = " + (a * b));
        System.out.println("b / a = " + (b / a));
        System.out.println("b % a = " + (b % a));
        System.out.println("c % a = " + (c % a));
        System.out.println("a++   = " + (a++));
        System.out.println("a--   = " + (a--));

        // 查看  d++ 与 ++d 的不同
        System.out.println("d++   = " + (d++));
        System.out.println("++d   = " + (++d));
    }
}
```

#### 运行结果


```java
a + b = 30
a - b = -10
a * b = 200
b / a = 2
b % a = 0
c % a = 5
a++   = 10
a--   = 11
d++   = 50
++d   = 52
```
结果我就不赘述了，聪明如我的你们肯定会一看秒懂！但是小伙伴们是不是都在好奇那个自增和自减 到底是什么呢，以前都么怎么见过，放在前面和后面到底又有何不同呢？接下来我们就来说说自增自减运算符。

#### 自增自减运算符

首先说下自增、自减运算的含义，如下表！

|  运算符   |   含义  | 
| --- | --- | 
|   i++  |   将 i 的值先使用再加 1 赋值给 i 变量本身  |   
|   ++i  |   将 i 的值先加 1 赋值给变量 i 本身后再使用  |   
|   i--  |   将 i 的值先使用再减 1 赋值给变量 i 本身  |   
|   --i  |   将 i 的值先减 1 后赋值给变量 i 本身再使用  |   


具体自增自减是如何运算的详细请往下看。

- 自增（`++`）自减（`--`）运算符是一种`特殊`的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。

- **前缀自增自减法(`++a`,`--a`)**: *先进行自增或者自减运算，再进行表达式运算*。


  - 示例
  
    ```java
      public class selfAddMinus{
          public static void main(String[] args){

              int a = 3;//定义一个变量
              int b = ++a;//自增运算

              int c = 3;
              int d = --c;//自减运算

              System.out.println("进行自增运算后的值等于"+b);
              System.out.println("进行自减运算后的值等于"+d);
          }
      }
    ```
  
  - 结果
  
  
    ```java
      进行自增运算后的值等于4
      进行自减运算后的值等于2
    ```

  - 解析
    
    - *`int b = ++a`*;
    
      拆分运算过程为: `a=a+1=4`; `b=a=4`
    
      最后结果为`b=4`,`a=4`

    - *`int d = --c`*; 
    
      拆分运算过程为: `c=c-1=2`; `d=c=2`
      
      最后结果为`d=2`,`c=2`




- **后缀自增自减法(`a++`,`a--`)**: *先进行表达式运算，再进行自增或者自减运算*。


  - 示例
  
    ```java
      public class selfAddMinus{
          public static void main(String[] args){

              int a = 5;//定义一个变量；
              int b = 5;

              int x = 2 * ++a;
              int y = 2 * b++;

              System.out.println("自增运算符前缀运算后 a="+ a +", x="+ x);
              System.out.println("自增运算符后缀运算后 b="+ b +", y="+ y);
          }
      }
    ```
  
  - 结果
  

    ```java
      自增运算符前缀运算后 a=6, x=12
      自增运算符后缀运算后 b=6, y=10
    ```

- *注意⚠️*（一定，必须要看）

  - 自增/自减只能作用于变量，不允许对常量、表达式或其他类型的变量进行操作。一般常见的错误是试图将自增或自减运算符用于非简单变量表达式中。


  - 自增/自减运算可以用于整数类型 `byte`、`short`、`int`、`long`，浮点类型 `float`、`double`，以及字符串类型 `char`。


  - 在 Java 1.5 以上版本中，自增/自减运算可以用于基本类型对应的包装器类 `Byte`、`Short`、`Integer`、`Long`、`Float`、`Double` 和 `Character`。


  - 自增/自减运算结果的类型与被运算的变量类型相同。
  
当你看到到这里`算术运算符`就已经都明白了，接下来我们来看看`关系运算符`！


### 关系运算符


#### 定义


关系运算符 也可以称为 “ **`比较运算符`** ” ，是用于比较两个数据是否相等，比较判断两个变量或常量的大小。关系运算符是二元运算符，运算结果是 boolean 型。当运算符对应的关系成立时，运算结果是 true，否则是 false。


表格中的实例整数变量`A`的值为`10`，变量`B`的值为`20`：

|  运算符   |   描述  |  例子   |
| --- | --- | --- |
|   >   |  检查左操作数的值是否大于右操作数的值，如果是那么条件为真   |  （A> B）为假   |
|   <   |   检查左操作数的值是否小于右操作数的值，如果是那么条件为真  |  （A <B）为真   |
|  ==   |  检查如果两个操作数的值是否相等，如果相等则条件为真   |  （A == B）为假   |
|   !=  |  检查如果两个操作数的值是否相等，如果值不相等则条件为真  |   (A != B) 为真  |
|  >=   |   检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真  |  （A> = B）为假   |
|   <=  |   检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真  |  A <= B）为真   |



#### 注意⚠️

- 不要将“ `==` ”写成“ `=` ”。


- 运算符 `>=`、`==`、`!=`、`<=` 是两个字符构成的一个运算符，用空格从中分开写就会产生语法错误。例如 `x> =y`; 是错误的，但是可以写成x >= y; 在运算符的两侧增加空格会提高可读性。同样将运算符写反，例如 =>、=<、=! 等形式会产生语法错误。

- 基本类型的变量、值不能和引用类型的变量、值使用 == 进行比较；boolean 类型的变量、值不能与其他任意类型的变量、值使用 == 进行比较；如果两个引用类型之间没有父子继承关系，那么它们的变量也不能使用 == 进行比较。


- == 和 != 可以应用于基本数据类型和引用类型。当用于引用类型比较时，比较的是两个引用是否指向同一个对象，但当时实际开发过程多数情况下，只是比较对象的内容是否相当，不需要比较是否为同一个对象。



- 由于计算机内存放的实数与实际的实数存在着一定的误差，如果对浮点数进行 ==（相等）或 !=（不相等）的比较，容易产生错误结果，应该尽量避免。



下面我们来写一个小示例简单演示下关系运算符


#### 示例


```java
public class GuanXi {

    public static void main(String[] args) {

        int a = 40;
        int b = 50;
        
        System.out.println("a == b = " + (a == b));
        System.out.println("a != b = " + (a != b));
        System.out.println("a > b = " + (a > b));
        System.out.println("a < b = " + (a < b));
        System.out.println("b >= a = " + (b >= a));
        System.out.println("b <= a = " + (b <= a));
    }
}
```


#### 结果


```java
a == b = false
a != b = true
a > b = false
a < b = true
b >= a = true
b <= a = false
```

关系运算符对小伙伴们来说很简单，因为在数学中还是经常使用到的。接下来我们来说下`位运算符`，这个是不是没有听过，下面让我来好好说道说道



### 位运算符

#### 定义

Java 定义的`位运算`是直接对整数类型的位进行操作，这些整数类型包括 `long，int，short，char 和 byte`。

位运算符主要用来对操作数**二进制的位**进行运算。按位运算表示按每个二进制位（`bit`）进行计算，其操作数和运算结果都是**整型值**。

*Java 语言中的位运算符分为**位逻辑运算符**和**位移运算符**两类，下面来详细介绍下这两类位运算符*

#### 分类

##### 位逻辑运算符


位逻辑运算符包含  `&`（与）、`|`（或）、`~`（非）和 `^`（异或） 4 个。

除了 `~`（即位取反）为单目运算符外，其余都为双目运算符。下面来说下它们的基本用法。

- **位与运算符**

  位与运算符为 `&`，其运算规则是：参与运算的数字，低位对齐，高位不足的补零，如果对应的二进制位同时为 1，那么计算结果才为 1，否则为 0。因此，任何数与 0 进行按位与运算，其结果都为 0。
  
  
- **位或运算符**

  位或运算符为 `|`，其运算规则是：参与运算的数字，低位对齐，高位不足的补零。如果对应的二进制位只要有一个为 1，那么结果就为 1；如果对应的二进制位都为 0，结果才为 0。

- **位异或运算符**

  位异或运算符为 `^`，其运算规则是：参与运算的数字，低位对齐，高位不足的补零，如果对应的二进制位相同（同时为 0 或同时为 1）时，结果为 0；如果对应的二进制位不相同，结果则为 1。

- **位取反运算符**
  
  位取反运算符为 `~`，其运算规则是：只对一个操作数进行运算，将操作数二进制中的 1 改为 0，0 改为 1。


位运算符作用在所有的位上，并且按位运算。假设 *a = 60*，*b = 13*;它们的二进制格式表示将如下：


```java
A = 0011 1100
B = 0000 1101
-----------------
A & B = 0000 1100
A | B = 0011 1101
A ^ B = 0011 0001
~ A = 1100 0011
```

下面来列出位逻辑运算符的基本运算，假设整数变量 *A* 的值为 *60* 和变量 *B* 的值为 *13*：



|   操作符  |  含义及描述   |  例子   | 
| --- | --- | --- | --- |
|   &  |  *按位进行与运算* - 如果相对应位都是1，则结果为1，否则为0（AND） |  （A＆B），得到12，即 0000 1100  |
|  ｜  |   *按位进行或运算* - 如果相对应位都是 0，则结果为 0，否则为 1  （OR） |  （A ｜ B）得到61，即 0011 1101  |
|   ^  |  *按位进行异或运算* - 如果相对应位值相同，则结果为0，否则为1 （XOR）  | (A ^ B) 得到49，即 0011 0001 |   
|   ~  |  *按位进行取反运算* - 按位取反运算符翻转操作数的每一位，即0变成1，1变成0  （NOT）  | (〜A) 得到-61，即1100 0011  |  


下面的简单示例程序演示了这些位逻辑运算符

###### 实例


```java
public class Wei {
  public static void main(String[] args) {
  
     int a = 60; /* 60 = 0011 1100 */ 
     int b = 13; /* 13 = 0000 1101 */
     int c = 0;
     
     c = a & b;       /* 12 = 0000 1100 */
     System.out.println("a & b = " + c );
 
     c = a | b;       /* 61 = 0011 1101 */
     System.out.println("a | b = " + c );
 
     c = a ^ b;       /* 49 = 0011 0001 */
     System.out.println("a ^ b = " + c );
 
     c = ~a;          /*-61 = 1100 0011 */
     System.out.println("~a = " + c );

  }
} 
```

###### 运行结果


```java
a & b = 12
a | b = 61
a ^ b = 49
~a = -61
```


##### 位移运算符


位移运算符就是对于*数据在内存中的表示*，进行按照位来移动，以此达到对数据进行运算的目的。

可以将操作数向某个方向（向左或者右）移动指定的二进制位数


⚠️ *只能操作整数类型的数据，运算结果还是整数*


下面来列出了 Java 语言中的位移运算符

- **左位移运算符**
  
  左移位运算符为 `<<`，其运算规则是：按二进制形式把所有的数字向左移动对应的位数，高位移出（舍弃），低位的空位补零。
  
  简单来说，*每次移动一位，会将原来的数字扩大2倍*

- **右位移运算符**
  
  右位移运算符为 `>>`，其运算规则是：按二进制形式把所有的数字向右移动对应的位数，低位移出（舍弃），高位的空位补零。
  
  简单来说，*每次移动一位，会将原来的数字缩小为原来的二分之一*
  

- **无符号右移**

  无符号右移 为 `>>>`，其运算规则是：即若该数为正，则高位补0，而若该数为负数，则右移后高位同样补0
  
  简单来说，*每次移动一位，会将原来的数字缩小为原来的二分之一，这个运算符只能针对正数操作。效率高于右移运算符*
  
下面来列出位移运算符的基本运算，假设整数变量 *A* 的值为 *60* 和变量 *B* 的值为 *13*：

|   操作符  |  含义及描述   |  例子   | 
| --- | --- | --- | --- |
|   <<  |  *按位左移运算符* - 左操作数按位左移右操作数指定的位数 |  A << 2得到240，即 1111 0000 |
|  >>  |   *按位右移运算符* - 左操作数按位右移右操作数指定的位数 |  A >> 2得到15即 1111 |
|  >>>  |  *按位右移补零操作符* - 左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充  |  A>>>2得到15即0000 1111 |

下面的简单示例程序演示了这些位移运算符

###### 实例


```java
public class Wei {
  public static void main(String[] args) {
  
     int a = 60; /* 60 = 0011 1100 */ 
     int b = 13; /* 13 = 0000 1101 */
     int c = 0;
     
     c = a << 2;     /* 240 = 1111 0000 */
     System.out.println("a << 2  = " + c );
 
     c = a >> 2;     /* 15 = 1111 */
     System.out.println("a >> 2  = " + c );
  
     c = a >>> 2;     /* 15 = 0000 1111 */
     System.out.println("a >>> 2 = " + c );
  }
} 
```


###### 运行结果


```java
a << 2  = 240
a >> 2  = 15
a >>> 2 = 15
```


看到这小伙伴们是不是对**算术运算符**、**关系运算符**、**位运算符**已经了解透彻了，你们太棒了！

那剩下的**逻辑运算符**、**赋值运算符**、**其他运算符** 这三个运算符，预知后事如何，请听下回分解！


