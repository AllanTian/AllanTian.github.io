---
layout: post
category: java
title: Java变量
tagline: by AllanTian
tags: 
  - java
---


# Java变量

### 前言

细心的小伙伴们有没有发现我前面在举例说常量的时候，提到了变量，很多小伙们肯定都猜到了，那既然有常量肯定就有变量，那就不多说了，我们直接进入主题，今天就来说下变量又是神马东西。

## 定义

### 变量

见名知意，广义就是：**会变化的量**。

小伙伴们都知道常量，它的值是不能被修改的，而变量的值就在程序运行过程中，其值可以被修改，会发生改变的量。Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。

### 举例

在2D游戏程序中，需要代表人物的位置，则需要2个变量，一个是 x 坐标，一个是 y 坐标，而在程序运行过程中，这两个变量的值会发生改变。



## 声明

### 格式

Java是一种强类型语言，每个变量都必须声明其类型。 

- Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。 

- 变量在使用前必须对其声明, 只有在变量声明以后，才能为其分配相应长度的存储单元， 声明格式为：

```java
type identifier [ = value][, identifier [= value] ...] ;
// 数据类型 变量名 = 变量值;
```

### 举例



```java
String teacher;    // String 类型的变量
boolean weight;    // boolean 类型的变量
int age;    // int 类型的变量
```



## 赋值

### 初始化

初始化变量是指为变量指定一个明确的初始值。

初始化变量有两种方式：一种是**声明时直接赋值**，一种是**先声明、后赋值**。

如下代码分别使用两种方式对变量进行了初始化。

### 举例

**声明时直接赋值**

```java 
char sex = '男';    // 直接赋值
```

**先声明、后赋值**

```
String name;    // 先声明
name ="小明";    // 后赋值
```

此外，多个同类型的变量可以同时定义或者初始化，但是多个变量中间要使用逗号分隔，声明结束时用分号分隔。

```java
String name , address , sex ,  synopsis ;    // 声明多个变量
int age = 28 , num = 32 , count = 3 ;    // 声明并初始化多个变量
```

### 总举例

```java 
int a, b, c;         // 声明三个int型整数：a、 b、c
int d = 3, e = 4, f = 5; // 声明三个整数并赋予初值
byte z = 22;         // 声明并初始化 z
String s = "runoob";  // 声明并初始化字符串 s
double pi = 3.14159; // 声明了双精度浮点型变量 pi
char x = 'x';        // 声明变量 x 的值是字符 'x'
```


### 初始化变量注意

- 变量是类或者结构中的字段，如果没有显式地初始化，默认状态下创建变量并默认初始值为 0。

- 方法中的变量必须显式地初始化，否则在使用该变量时就会出错。

- 如上方举例可以在一行中声明多个变量，但是不提倡这种风格，逐一声明每一个变量可以提高程序可读性。

- 可以将变量的声明和初始化放在同一行中


- 每个变量都有类型，类型可以是基本类型，也可以是引用类型。 

- 变量名必须是合法的标识符。（具体标识符规则可查看此文章）


### 为何使用变量

- 在程序中，有一些代表相同意义的数据，在不断发生变化，例如：用户年龄

- 定义一个不变的变量名称，表示那些不断变化的数字

- 在内存中，其实就是一段内存空间，空间中的数据可以不断的变化



## 作用域类型

变量的作用域就是规定了变量所能使用的范围，只有在作用域范围内变量才能被使用。

因变量声明地点的不同，所以变量的作用域也不同。

而根据作用域的不同，一般将变量分为不同的类型：**成员变量**和**局部变量**。

下面对两种不同的类型进行详细说明。


## 成员变量

Java 的成员变量有两种，分别是**全局变量**和**静态变量**（`类变量`）。

如定义在方法体和语句块之外，不属于任何一个方法的话，作用域就是整个类。

| 名称 | 修饰  | 访问  | 生命周期  |
| --- | --- | --- | --- |
| 全局变量（实例变量）  | 无 static 修饰  | 对象名.变量名  | 只要对象被当作引用，实例变量就将存在  |
| 静态变量（类变量）  | 用 static 修饰  | 类名.变量名或对象名.变量名  | 其生命周期取决于类的生命周期。类被垃圾回收机制彻底回收时才会被销毁  |

`其作用域都是独立于方法之外的变量`

### 实例变量 （全局变量）

- 实例变量声明在一个类中，但在方法、构造方法和语句块之外；


- 当一个对象被实例化之后，每个实例变量的值就跟着确定；


- 实例变量在对象创建的时候创建，在对象被销毁的时候销毁；


- 实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；


- 实例变量可以声明在使用前或者使用后；

- 访问修饰符可以修饰实例变量；

- 实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；


- 实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；

- 实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。

### 举例

```java
public class People {

    // 这个实例变量对子类可见
    public String name;
    // 私有变量，仅在该类可见
    private int age;
    //在构造器中对name赋值
    public People (String popName){
        name = popName;
    }
    //设定age的值
    public void setAge(int age) {
        this.age = age;
    }

    // 打印信息
    public void printPop(){
        System.out.println("名字 : " + name );
        System.out.println("年龄 : " + age);
    }

    public static void main(String[] args){
        People people = new People("超Ren专属");
        people.setAge(28);
        people.printPop();
    }
}
```

运行结果如下：

```java
$ javac People.java 
$ java People
名字 : 超Ren专属
年龄 : 28
```

### 类变量 （静态变量）

- 类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。

- 无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。

- 静态变量除了被声明为常量外很少使用。常量是指声明为public/private，final和static类型的变量。常量初始化后不可改变。

- 静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。

- 静态变量在第一次被访问时创建，在程序结束时销毁。

- 与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。

- 默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。

- 静态变量可以通过：ClassName.VariableName的方式访问。

- 类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。

### 举例


假设在一个类中声明了 4 个变量，下面编写一个测试类输出引起变量的值改变的示例代码。

变量声明代码如下所示：

```java
public class MyWork {

    // 成员变量、实例变量
    String name;
    // 成员变量、实例变量
    int age ;
    // 成员变量、实例变量
    char sex = '男';
    // 成员变量、静态变量(类变量)
    static final String nickName = "超Ren专属";
    // 成员变量、静态变量(类变量)
    static String CSDNURL = "https://blog.csdn.net/qq_39052513";

}
```
测试类代码如下所示：

```java

public class Demo {

    public static void main(String[] args) {
        // 创建类的对象
        MyWork myWork = new MyWork();
        // 对象名.变量名调用实例变量（全局变量）
        System.out.println(myWork.name);
        System.out.println(myWork.age);
        System.out.println(myWork.sex);
        // 对象名.变量名调用静态变量（类变量）
        System.out.println(myWork.nickName);
        System.out.println(myWork.CSDNURL);
        // 类名.变量名调用静态变量（类变量）
        System.out.println(MyWork.nickName);
        System.out.println(MyWork.CSDNURL);
    }
}
```

运行结果如下所示:

```java
null
0
男
超Ren专属
https://blog.csdn.net/qq_39052513
超Ren专属
https://blog.csdn.net/qq_39052513
```


从变量声明代码可以看到定义了 4 个成员变量，由输出结果可以看出，name 和 age 显示系统默认初始化的值，sex、nickName 和 CSDNURL 显示初始化的值。且用 static final 修饰的变量必须赋予初始值。

## 局部变量

- 局部变量声明在方法、构造方法或者语句块中，是指在方法或方法代码块中定义的变量，其作用域是其所在的代码块。

- 局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；

- 访问修饰符不能用于局部变量；

- 局部变量只在声明它的方法、构造方法或者语句块中可见；

- 局部变量是在栈上分配的。

- 局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。

可分为**方法参数变量**、**方法局部变量** 和 **代码块局部变量**三种。其作用域具体看下表

| 名称 | 作用域  | 
| --- | --- | 
| 方法参数变量（形参）  | 在整个方法内有效  | 
| 方法局部变量（方法内定义）  | 从定义这个变量开始到方法结束这一段时间内有效  |
| 代码块局部变量（代码块内定义）  | 从定义这个变量开始到代码块结束这一段时间内有效  |


**`局部变量在使用前必须被程序员主动初始化值`**

### 方法局部变量

声明一个局部变量age并输出其值其实现代码如下：

```java
public class Demo {

    public void popAge() {
        int age = 0;
        age = age + 28;
        System.out.println("小明的年龄是: " + age);
    }

    public static void main(String[] args) {
        Demo demo = new Demo();
        demo.popAge();
    }
}
```

上述实例中定义了 局部变量  age ，而 int 类型的 age 的作用域就限制在pupAge() 这个方法中
，在main方法中就无法使用

运行结果

```java
小明的年龄是: 28
```

### 方法参数变量

作为方法参数声明的变量的作用域是整个方法。

声明一个方法参数变量，实现代码如下：


```java
public class Demo {


    public static void popName(String name) {
        System.out.println("该用户的姓名为: " + name);
    }

    public static void main(String[] args) {
        popName("超Ren专属");
    }
}
```

在上述实例中定义了一个 popName() 方法，该方法中包含一个 String 类型的参数变量 name，其作用域是 popName() 方法体内。当调用方法时传递进了一个参数 "超Ren专属" ，因此其输出控制台的 超Ren专属。

运行结果为：

```java
该用户的姓名为: 超Ren专属
```


### 代码块局部变量

代码块局部变量一般常用于` try  catch `代码块中，成为**异常处理参数变量**。

异常处理参数变量的作用域是在异常处理块中，该变量是将异常处理参数传递给异常处理块，与方法参数变量类似。

声明一个异常处理语句，实现代码如下：

```java
public class Demo {

    public static void demo() {
        try {
            System.out.println("欢迎来到异常处理代码块，我将为你捕获所有异常，并返回异常原因！");
        } catch (Exception e) { // 异常处理块，参数为 Exception 类型
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        demo();
    }
}
```
在上述实例中定义了异常处理语句，异常处理块 catch 的参数为 Exception 类型的变量 e，作用域是整个 catch 块。





## 注意事项

- 变量是有**作用域** 的。

    - **作用域**：起作用的范围。
    
    - **范围**：变量在哪对大括号中声明定义的，范围就是哪对大括号


- 在同一个作用域中，**不能定义重名**的变量。

- 在方法中定义的变量，必须**先初始化再赋值**，之后才能使用。


- 定义变量可以将变量的声明和变量的赋值，**分离**。

    - **变量的定义**：带着数据类型的写法，作用就是在内存中开辟一段空间

    - **变量的使用**：不带数据类型的写法，作用就是使用内存中已经开辟好的空间（要么是修改空间中的内容，要么是获取空间中的内容）


## 总结

看到这里Java变量就已经到此结束啦，学会了你就会七十二般变化，想变神马就变🐎，无所不能！若有不足之处还望指点。





