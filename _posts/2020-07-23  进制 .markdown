# java 数制

## 前言

今天小张问了我关于进制转换的一些问题，给他细细讲说了一番，我就速速来说下，预知到不对劲，免得其他小伙伴说我偏心。只给小张说，不跟我们分享分享。只是预知😂那我就开始说了啊，耐心的看完，你就会立马感觉自己的大脑知识又瞬增好几倍！

一说起数制，我这脑海就立马回味起来无尽往事，想起当年那时候的我，还是一个刚入门的小白，只有着一颗对电脑疯狂热爱的心，当时在学校上课的时候，老师讲了一节进制转换的课，我就像听天书一样，飘飘然的度过了这一节课，后来因自己刚开始也半天理解不了，只能自己在本子上画来画去，就是想不通，最后经过百般联系总结理解透彻，完美转换，今天我就带大家走进Java 数制，轻松搞懂进制转换！


## 定义

小伙们肯定心里疑问，数制到底是什么呢，听你在这一会说数制，一会又在说进制，我觉得没一会我就蒙圈了。别怕，接下来要好好认真的看了！


### 数制

#### 概念

数制也称为“`计数制`”，是用一组`固定的符号`和`统一的规则`来表示`数值的方法`。
（ 说白了就是进位的制度 ）

**为什么要了解数制呢？**

因为虽然计算机能极快地进行运算，但是其内部并不像人类在实际生活中使用的十进制，而是使用只包含0和1两个数值的二进制。当然，人们输入计算机的十进制被转换成二进制进行计算，计算后的结果又由二进制转换成十进制，这都由操作系统自动完成，并不需要人们手工去做，要是学习汇编语言，就必须了解二进制（还有八进制/十六进制）。


#### 分类

学习数制的话，必须首先掌握 *数码*、*基数*、 *位权* 和 *计数* 这 *4* 个概念

##### *数码*

数制中表示基本数值大小的不同数字符号。例如，十进制有10个数码：0、1、2、3、4、5、6、7、8、9。


##### *基数*

数制所使用数码的个数。例如，二进制的基数为2；十进制的基数为10。

##### *位权*

数制中某一位上的1所表示数值的大小（所处位置的价值）。例如，十进制的123，1的位权是100，2的位权是10，3的位权是1。二进制中的 1011 (一般从左向右开始)，第一个1的位权是8，0的位权是4，第二个1的位权是2，第三个1的位权是1

##### *计数*

计数的规则。在人们使用最多的进位计数制中，表示数的符号在不同的位置上时所代表的数的值是不同的。

#### 常见的数制


* *十进制* ： 使用的数字符号**0 ～ 9**来描述， 计数规则是 *逢十进一* ， 如： 20,  100  （在日常生活中最熟悉的进位计数制）


* *二进制* ： 使用的数字符号**0、1**来描述，计数规则是 *逢二进一，借一当二*， 如：0, 1, 10, 11, 100, 101, 110, 111, 1000 （计算机系统中采用的进位计数制）


* *八进制* ： 使用的数字符号**0 ～ 7**来描述，计数规则是 *逢八进一*， 如：6，7， 10， 11， 77， 100 （常应用在计算机语言中）


* *十六进制* ： 使用的数字符号**0 ～ 9 和 A ～ F（或 a ～ f）**，计数规则是 *逢十六进一*， 如9，a，b，c，d，e，f， 19， 1f， 20 （在计算机指令代码和数据的书写中经常使用）


#### 数制符号

- 二进制B (binary)

- 八进制O (octal)

- 十进制D (decimal)

- 十六进制H (hexadecimal)

看到这是不是对数制已经了解透彻啦，那数制中说到的几进制中的进制又是什么呢？还等什么继续看！

### 进制

#### 概念

进制也就是`进位计数制`，是人为定义的`带进位`的`计数方法`。（有不带进位的计数方法，比如原始的结绳计数法，唱票时常用的“正”字计数法，以及类似的tally mark计数）

#### 特点

对于任何一种进制 —— X进制，就表示每一位置上的数运算时都是逢X进一位。 十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，x进制就是逢x进位。

#### 表示

在 Java 语言中对各个进制的数据的表示是不一样的，如下：

- *十进制* ： 在java语言中，*直接写出的数字（整数）*，就默认是十进制的表示

- *二进制* ： 在数字前面加上 *0b*，**b可以大写可以小写**

- *八进制* ： 在数字前面加上 *0*

- *十六进制* ： 在数字前面机上 *0x*，**x可以大写可以小写**


#### 示例


```java
public class JinZhi {

    public static void main(String[] args) {
        //打印十进制的100
        System.out.println("十进制的100为： " + 100);
        
        //打印二进制的100
        System.out.println("二进制的100为： " + 0b100);
        
        //打印八进制的100
        System.out.println("八进制的100为： " + 0100);
        
        //打印十六进制的100
        System.out.println("十六进制的100为： " + 0x100);
    }

}
```

##### 运行结果


```java
十进制的100为： 100
二进制的100为： 4
八进制的100为： 64
十六进制的100为： 256
```



## 转换

进制之前的相互转换

经常使用的转换总的来说转化就分为两种转换，分别为 *十进制转成其他进制* 和 *其他进制转成十进制* ！下面我们来详细说下它们到底是如果转换的


### 十进制转成其他进制

简单来说就是  *除基倒取余*

小伙伴们肯定很纳闷 你说的除基倒取余到底是什么意思呢？往下看你就会恍然大悟👇

- *除*  ：除法
- *基*  ：要转成几进制，基就是几
- *取余*  ：在除法过后，不要商，要的是余数
- *倒*  ：先获取到的余数在最后，后获取到的在前面

下来我来画个图举个简单的例子，我们再详细说下


#### 十进制转二进制

##### 方法

十进制数除2取余法，即十进制数除2，余数为权位上的数，得到的商值继续除2，依此步骤继续向下运算直到商为0为止


#### 十进制转八进制或十六进制

十进制转八进制或十六进制有两种方法

##### one方法

间接法 —— 把十进制转成二进制，然后再由二进制转成八进制或者十六进制。这里不再做图片用法解释。


##### two方法

把十进制转八进制或者十六进制按照除8或者16取余，直到商为0为止。


### 其他进制转成十进制


简单来说就是  *系数 乘以 (基数的权次幂)，求和*

解释：

- *系数*：每一位上数字是几，系数就是几

- *基数*：是几进制的数字，基数就是几

- *权*：表示某个数字的位置（数字的权重，数字的大小） 从0到1开始基数，从右到左统计，例如：135， 5的权是0， 3的权是1， 1的权是2



举个简单的例子，我们再详细说下


```java

二进制转十进制：101010
101010 = 1 * 2^5 + 0 * 2^4 + 1 * 2^3 + 0 * 2^2 + 1 * 2^1 + 0 * 2 ^0 = 42

八进制转十进制：37	 	
37 = 3 * 8^1 + 7 * 8^0 = 24 + 7 = 31
 	
十六进制转十进制：3c
3c = 3 * 16^1 + c * 16^0 = 60

```

#### 二进制转十进制

##### 方法

把二进制数按权展开、相加即得十进制数。


#### 八进制或十六进制转成十进制


##### 方法

把八进制、十六进制数按权展开、相加即得十进制数。



### 其他进制转换

#### 二进制转八进制

##### 方法

3位二进制数按权展开相加得到1位八进制数。（注意事项，3位二进制转成八进制是从右到左开始转换，不足时补0）。



#### 八进制转成二进制

##### 方法

八进制数通过除2取余法，得到二进制数，对每个八进制为3个二进制，不足时在最左边补零。


#### 二进制转十六进制

##### 方法

与二进制转八进制方法近似，八进制是取三合一，十六进制是取四合一。（注意事项，4位二进制转成十六进制是从右到左开始转换，不足时补0）


#### 十六进制转二进制

##### 方法

十六进制数通过除2取余法，得到二进制数，对每个十六进制为4个二进制，不足时在最左边补零。




#### 十六进制与八进制之间的转换

八进制与十六进制之间的转换有两种方法


##### one方法

他们之间的转换可以先转成二进制然后再相互转换


##### two方法

他们之间的转换可以先转成十进制然后再相互转换


## 总结

当你看到这的时候，又该不舍的说声 “再见” 啦，回想起当时010101就是想不明白，现在觉得那就那样，相信自己可以的，没有搞弄不懂的知识，奥力给！什么进制，什么数制！统统不是问题

还有更多的秘密等着你来探索啊！
